{"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Navigator"}],"title":"Navigation Tree"},"seeAlsoSections":[{"anchor":"The-Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Destinations","doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"],"generated":true,"title":"The Basics"}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"NavigationStacks are managed by Navigators. Each ","type":"text"},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","isActive":true},{"type":"text","text":" used in your code creates its own "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Navigator","isActive":true},{"text":" and places an instance of that object into the environment for use by the views contained within it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"That allows ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"those"}]},{"type":"text","text":" views to talk to "},{"inlineContent":[{"type":"text","text":"their"}],"type":"emphasis"},{"type":"text","text":" navigator."}]},{"text":"Roots","anchor":"Roots","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"One exception is the “root” Navigator that’s usually configured and installed in the main application.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func applicationNavigator() -> Navigator {","    let configuration: NavigationConfiguration = .init(","        restorationKey: nil, \/\/ \"1.0.0\",","        executionDelay: 0.4, \/\/ 0.3 - 5.0","        verbosity: .info","    )","    return Navigator(configuration: configuration)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That “root” passes the configuration along to its children and also allows for communication in instances like tabs where each tab has its own ManagedNavigationStack."}]},{"anchor":"Growing-The-Tree","text":"Growing The Tree","level":2,"type":"heading"},{"inlineContent":[{"text":"If you look at the code for ","type":"text"},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":" (and "},{"code":"ManagedPresentationView","type":"codeVoice"},{"type":"text","text":"), you’ll see where each one gets the current Navigator. That Navigator is then passed to the navigation state as its “parent”, which in turn is used to build a navigation tree."}],"type":"paragraph"},{"syntax":"swift","code":["public struct ManagedPresentationView<Content: View>: View {","    @Environment(\\.navigator) private var parent: Navigator","    @Environment(\\.isPresented) private var isPresented","    ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Every Navigator created within your application lives within that tree.","type":"text"}]},{"inlineContent":[{"type":"text","text":"And that tree, in turn, is the key that unlocks much of Navigator’s power and functionality."}],"type":"paragraph"},{"text":"TabViews","type":"heading","anchor":"TabViews","level":2},{"type":"paragraph","inlineContent":[{"text":"Here’s a rough chart that illustrates the navigation tree of a running application that’s using a TabView.","type":"text"}]},{"code":["Application (Root Navigator)","TabView","-- Tab1: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab2: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab3: ManagedNavigationStack (New Navigator, Root as Parent)","---- Sheet: ManagedNavigationStack (New Navigator, Tab 3's as Parent)","------- Cover: ManagedNavigationStack (New Navigator, Presented Navigator is Parent)"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Each tab wants to manage its own navigation, so each one has its own "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"text":" and its own ","type":"text"},{"code":"Navigator","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"This should make sense. If a view within tab 2 wants to push a new view onto the stack, then it needs to be talking to the right navigator.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"It doesn’t want the view pushed onto tab 3’s stack, does it?","type":"text"}]},{"inlineContent":[{"text":"That concept extends to presented sheets and covers as shown in tab 3. Each ","type":"text"},{"type":"codeVoice","code":"ManagedNavigationStack"},{"text":" is installing its own Navigator into the tree, each one linked back to its parent.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Every "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":" creates its own "},{"code":"Navigator","type":"codeVoice"},{"type":"text","text":" that manages it."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"There are also ManagedPresentationViews, but that’s another topic."}],"type":"emphasis"}]},{"text":"Example Code","level":2,"anchor":"Example-Code","type":"heading"},{"inlineContent":[{"type":"text","text":"So with all of the above in mind, consider the following example."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @Environment(\\.navigator) var parentNavigator","    var body: some View {","        ManagedNavigationStack { navigator in","            VStack {","                Button(\"Doesn't work as expected\") {","                    parentNavigator.navigate(to: Destinations.second)","                }","                Button(\"Works as expected\") {","                    navigator.navigate(to: Destinations.second)","                }","                SomeView()","            }","            .navigationDestination(Destinations.self)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using an environment variable gets the current “parent” Navigator in the tree. (Root in this case.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"text":" creates and installs a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"new","type":"text"}]},{"text":" Navigator into the environment, one that knows how to talk to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Which means that the code in the first button fails because it’s talking to the wrong Navigator. If you want to manipulate the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"text":" NavigationStack and the designations that ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"it"}]},{"type":"text","text":" knows about, you need to be talking to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"its"}]},{"text":" Navigator.","type":"text"}]},{"inlineContent":[{"text":"One way to do that is to use the Navigator passed to the ManagedNavigationStack’s closure. That’s shown in the second example.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["ManagedNavigationStack { navigator in","    ...","}"]},{"inlineContent":[{"type":"text","text":"Another is to use the environment. Wait. What?"}],"type":"paragraph"},{"level":2,"anchor":"The-Environment","type":"heading","text":"The Environment"},{"type":"paragraph","inlineContent":[{"text":"Let’s consider  ","type":"text"},{"code":"SomeView","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct SomeView: View {","    @Environment(\\.navigator) var navigator","    var body: some View {","        Button(\"Also works as expected\") {","            navigator.navigate(to: Destinations.second)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s we’re also pulling from the environment, but in this case the code works as expected since "},{"inlineContent":[{"text":"its","type":"text"}],"type":"emphasis"},{"type":"text","text":" environment variable is reading the "},{"inlineContent":[{"text":"current","type":"text"}],"type":"emphasis"},{"type":"text","text":" environment variable, which is the one installed by the current "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Walking-The-Tree","type":"heading","text":"Walking The Tree","level":2},{"inlineContent":[{"text":"But what if I want to talk to a different Navigator?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"That’s more advanced. One can "},{"code":"find","type":"codeVoice"},{"type":"text","text":" a named Navigator in the tree, but generally you’re going to want to consider other functionality offered by Navigator, like "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","isActive":true},{"type":"text","text":", or deep linking using "},{"code":"send","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigator\/navigationtree"]}],"sections":[],"kind":"article","references":{"doc://Navigator/documentation/Navigator/Navigator":{"url":"\/documentation\/navigator\/navigator","title":"Navigator","abstract":[{"type":"text","text":"Every ManagedNavigationStack has a Navigator to manage it."}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Navigator","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Navigator"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Navigator"},"doc://Navigator/documentation/Navigator/ManagedNavigationStack":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedNavigationStack"}],"abstract":[{"type":"text","text":"Creates a NavigationStack and its associated Navigator that “manages” the stack."}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","url":"\/documentation\/navigator\/managednavigationstack","kind":"symbol","title":"ManagedNavigationStack","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ManagedNavigationStack"}]},"doc://Navigator/documentation/Navigator/Destinations":{"role":"article","title":"Destinations","url":"\/documentation\/navigator\/destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","kind":"article"},"doc://Navigator/documentation/Navigator":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator","url":"\/documentation\/navigator","role":"collection","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"Navigator"},"doc://Navigator/documentation/Navigator/Checkpoints":{"role":"article","title":"Checkpoints","url":"\/documentation\/navigator\/checkpoints","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","kind":"article"}}}