{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"metadata":{"roleHeading":"Article","modules":[{"name":"Navigator"}],"title":"Understanding The Navigation Tree","role":"article"},"seeAlsoSections":[{"title":"The Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Destinations","doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","doc:\/\/Navigator\/documentation\/Navigator\/Dismissible"],"generated":true,"anchor":"The-Basics"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"NavigationStacks are managed by Navigators. Each "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","isActive":true},{"text":" used in your code creates its own ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Navigator"},{"text":" and places an instance of that object into the environment for use by the views contained within it.","type":"text"}]},{"inlineContent":[{"text":"That allows ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"those","type":"text"}]},{"text":" views to talk to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"their","type":"text"}]},{"text":" navigator.","type":"text"}],"type":"paragraph"},{"anchor":"Roots","type":"heading","text":"Roots","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"One exception is the “root” Navigator that’s usually configured and installed in the main application."}]},{"syntax":"swift","type":"codeListing","code":["func applicationNavigator() -> Navigator {","    let configuration: NavigationConfiguration = .init(","        restorationKey: nil, \/\/ \"1.0.0\",","        executionDelay: 0.4, \/\/ 0.3 - 5.0","        verbosity: .info","    )","    return Navigator(configuration: configuration)","}"]},{"type":"paragraph","inlineContent":[{"text":"That “root” passes the configuration along to its children and also allows for communication in instances like tabs where each tab has its own ManagedNavigationStack.","type":"text"}]},{"type":"heading","level":2,"text":"Growing The Tree","anchor":"Growing-The-Tree"},{"inlineContent":[{"type":"text","text":"If you look at the code for "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" (and "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":"), you’ll see where each one gets the current Navigator. That Navigator is then passed to the navigation state as its “parent”, which in turn is used to build a navigation tree."}],"type":"paragraph"},{"code":["public struct ManagedPresentationView<Content: View>: View {","    @Environment(\\.navigator) private var parent: Navigator","    @Environment(\\.isPresented) private var isPresented","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Every Navigator created within your application lives within that tree.","type":"text"}]},{"inlineContent":[{"type":"text","text":"And that tree, in turn, is the key that unlocks much of Navigator’s power and functionality."}],"type":"paragraph"},{"anchor":"TabViews","type":"heading","level":2,"text":"TabViews"},{"inlineContent":[{"text":"Here’s a rough chart that illustrates the navigation tree of a running application that’s using a TabView.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["Application (Root Navigator)","TabView","-- Tab1: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab2: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab3: ManagedNavigationStack (New Navigator, Root as Parent)","---- Sheet: ManagedNavigationStack (New Navigator, Tab 3's as Parent)","------- Cover: ManagedNavigationStack (New Navigator, Presented Navigator is Parent)"]},{"inlineContent":[{"text":"Each tab wants to manage its own navigation, so each one has its own ","type":"text"},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" and its own "},{"type":"codeVoice","code":"Navigator"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"This should make sense. If a view within tab 2 wants to push a new view onto the stack, then it needs to be talking to the right navigator.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It doesn’t want the view pushed onto tab 3’s stack, does it?"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"That concept extends to presented sheets and covers as shown in tab 3. Each ","type":"text"},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" is installing its own Navigator into the tree, each one linked back to its parent."}]},{"inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"code":"ManagedPresentationView","type":"codeVoice"},{"type":"text","text":" creates its own "},{"code":"Navigator","type":"codeVoice"},{"text":" that manages it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And presented views can have their own presented views, with their own stacks, and so on, and so on, as needed."}],"type":"paragraph"},{"level":2,"text":"Example Code","anchor":"Example-Code","type":"heading"},{"inlineContent":[{"type":"text","text":"So with all of the above in mind, consider the following example."}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView: View {","    @Environment(\\.navigator) var parentNavigator","    var body: some View {","        ManagedNavigationStack { navigator in","            VStack {","                Button(\"Doesn't work as expected\") {","                    parentNavigator.navigate(to: Destinations.second)","                }","                Button(\"Works as expected\") {","                    navigator.navigate(to: Destinations.second)","                }","                SomeView()","            }","            .navigationDestination(Destinations.self)","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Using an environment variable gets the current “parent” Navigator in the tree. (Root in this case.)","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"But ","type":"text"},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":" creates and installs a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"new"}]},{"text":" Navigator into the environment, one that knows how to talk to it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Which means that the code in the first button fails because it’s talking to the wrong Navigator. If you want to manipulate the ","type":"text"},{"inlineContent":[{"type":"text","text":"current"}],"type":"emphasis"},{"type":"text","text":" NavigationStack and the designations that "},{"type":"emphasis","inlineContent":[{"text":"it","type":"text"}]},{"type":"text","text":" knows about, you need to be talking to "},{"type":"emphasis","inlineContent":[{"text":"its","type":"text"}]},{"text":" Navigator.","type":"text"}]},{"inlineContent":[{"type":"text","text":"One way to do that is to use the Navigator passed to the ManagedNavigationStack’s closure. That’s shown in the second example."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["ManagedNavigationStack { navigator in","    ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Another is to use the environment. Wait. What?","type":"text"}]},{"level":2,"text":"The Environment","anchor":"The-Environment","type":"heading"},{"inlineContent":[{"text":"Let’s consider  ","type":"text"},{"type":"codeVoice","code":"SomeView"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["struct SomeView: View {","    @Environment(\\.navigator) var navigator","    var body: some View {","        Button(\"Also works as expected\") {","            navigator.navigate(to: Destinations.second)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s we’re also pulling from the environment, but in this case the code works as expected since "},{"inlineContent":[{"type":"text","text":"its"}],"type":"emphasis"},{"text":" environment variable is reading the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" environment variable, which is the one installed by the current "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","anchor":"Walking-The-Tree","text":"Walking The Tree","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"But what if I want to talk to a different Navigator?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s more advanced. One can "},{"code":"find","type":"codeVoice"},{"type":"text","text":" a named Navigator in the tree, but generally you’re going to want to consider other functionality offered by Navigator, like "},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","isActive":true,"type":"reference"},{"type":"text","text":", or deep linking using "},{"type":"codeVoice","code":"send"},{"type":"text","text":"."}]},{"type":"heading","level":2,"text":"Presenting Views","anchor":"Presenting-Views"},{"type":"paragraph","inlineContent":[{"text":"What if, as shown earlier, Tab3View presents a sheet using Navigator?","type":"text"}]},{"inlineContent":[{"type":"text","text":"Internal to Navigator, that sheet’s view is wrapped in a  "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedPresentationView","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["func body(content: Content) -> some View {","    content","        .sheet(item: $state.sheet) { destination in","            ManagedPresentationView {","                destination","            }","        }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"That view gets its own Navigator, which knows that it’s been presented and as such is dismissible (See: ","type":"text"},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Dismissible","isActive":true,"type":"reference"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"text":"Be advised that if you present your own sheets or views externally from Navigator, you need to do the same so Navigator understands that your sheet or cover exists.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ wrap using ManagedPresentationView","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedPresentationView {","                MyView()","            }","        }","}","\/\/ or use the modifier shortcut which does the same thing","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            MyView()","                .managedPresentationView()","        }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also just use "},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","type":"reference","isActive":true},{"text":" if navigation within the sheet is required.","type":"text"}]},{"type":"codeListing","code":["func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedNavigationStack {","                MyView()","            }","        }","}"],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":"Failure to do any of the above can hinder Navigator’s ability to successfully perform in-app navigation or external deep linking."}],"type":"paragraph"}],"style":"important","name":"Important","type":"aside"}]}],"kind":"article","variants":[{"paths":["\/documentation\/navigator\/navigationtree"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Navigator/documentation/Navigator/Checkpoints":{"title":"Checkpoints","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","url":"\/documentation\/navigator\/checkpoints"},"doc://Navigator/documentation/Navigator/Dismissible":{"role":"article","title":"Dismissible Views","kind":"article","url":"\/documentation\/navigator\/dismissible","type":"topic","abstract":[{"type":"text","text":"Understanding dismissible views and their role in application navigation and deep linking."}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Dismissible"},"doc://Navigator/documentation/Navigator/ManagedPresentationView":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedPresentationView"}],"type":"topic","url":"\/documentation\/navigator\/managedpresentationview","abstract":[{"type":"text","text":"Allows presented views not in a navigation stack to be dismissed using a Navigator."}],"role":"symbol","kind":"symbol","title":"ManagedPresentationView","navigatorTitle":[{"text":"ManagedPresentationView","kind":"identifier"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedPresentationView"},"doc://Navigator/documentation/Navigator/Destinations":{"role":"article","type":"topic","kind":"article","title":"Destinations","url":"\/documentation\/navigator\/destinations","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}]},"doc://Navigator/documentation/Navigator/Navigator":{"title":"Navigator","url":"\/documentation\/navigator\/navigator","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Navigator","navigatorTitle":[{"kind":"identifier","text":"Navigator"}],"abstract":[{"text":"Every ManagedNavigationStack has a Navigator to manage it.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Navigator"}],"type":"topic","kind":"symbol"},"doc://Navigator/documentation/Navigator/ManagedNavigationStack":{"kind":"symbol","abstract":[{"text":"Creates a NavigationStack and its associated Navigator that “manages” the stack.","type":"text"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","title":"ManagedNavigationStack","url":"\/documentation\/navigator\/managednavigationstack","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedNavigationStack"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedNavigationStack"}],"type":"topic"},"doc://Navigator/documentation/Navigator":{"url":"\/documentation\/navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"Navigator","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/Navigator\/documentation\/Navigator"}}}