{"kind":"article","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"],"title":"Related Documentation","anchor":"Related-Documentation"},{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"],"anchor":"The-Basics","generated":true,"title":"The Basics"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"NavigationDestination types can be used in order to push and present views as needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can happen using…"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Standard SwiftUI modifiers like NavigationLink(value:label:).","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Imperatively by asking a Navigator to perform the desired action.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Or via a deep link action enabled by a NavigationURLHander."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"They’re one of the core elements that make Navigator possible, and they give us the separation of concerns we mentioned earlier."}]},{"text":"Defining Navigation Destinations","level":3,"type":"heading","anchor":"Defining-Navigation-Destinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Destinations (or routes) are typically just public lists of enumerated values, one for each view desired."}]},{"code":["public enum HomeDestinations {","    case page2","    case page3","    case pageN(Int)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"SwiftUI requires navigation destination values to be "},{"type":"codeVoice","code":"Hashable"},{"text":", and so do we. That conformance, however, is satisfied by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conforming to the protocol NavigationDestination as shown next."}],"type":"paragraph"},{"level":3,"text":"Defining Destination Views","anchor":"Defining-Destination-Views","type":"heading"},{"inlineContent":[{"type":"text","text":"Defining our destination views is easy, since NavigationDestination actually conforms to the View protocol!"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As such, we just extend our destination with a view body that returns the correct view for each case."}]},{"code":["extension HomeDestinations: NavigationDestination {","    public var body: some View {","        switch self {","        case .page2:","            HomePage2View()","        case .page3:","            HomePage3View()","        case .pageN(let value):","            HomePageNView(number: value)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is a powerful technique that lets Navigator easily create our views whenever or wherever needed. That could be via ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label)"},{"text":", or presented via a sheet or fullscreen cover.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note how associated values can be used to pass parameters to views as needed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"*To build more complex views that have external dependencies or that require access to environmental values, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","isActive":true},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"Registering Navigation Destinations","anchor":"Registering-Navigation-Destinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like traditional "},{"type":"codeVoice","code":"NavigationStack"},{"text":" destination types, ","type":"text"},{"type":"codeVoice","code":"NavigationDestination"},{"type":"text","text":" types need to be registered with the enclosing"},{"type":"text","text":" "},{"type":"text","text":"navigation stack in order for "},{"type":"codeVoice","code":"navigate(to:)"},{"type":"text","text":" presentations and standard "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"text":" transitions","type":"text"},{"type":"text","text":" "},{"text":"to work correctly.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But since each "},{"type":"codeVoice","code":"NavigationDestination"},{"text":" already defines the views to be provided, registering destination types can be done","type":"text"},{"text":" ","type":"text"},{"text":"using a simple one-line view modifier.","type":"text"}]},{"type":"codeListing","code":["ManagedNavigationStack {","    HomeView()","        .navigationDestination(HomeDestinations.self)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This also makes using the same destination type with more than one navigation stack a lot easier."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Note that registering types more than once in the same NavigationStack isn’t recommended and Navigator will in fact warn you if it see multiple registrations of the same type.","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"level":3,"text":"Using Navigation Destinations","type":"heading","anchor":"Using-Navigation-Destinations"},{"inlineContent":[{"text":"With that out of the way, Navigation Destinations can be dispatched using a standard SwiftUI ","type":"text"},{"code":"NavigationLink(value:label:)","type":"codeVoice"},{"text":" view.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}"]},{"type":"paragraph","inlineContent":[{"text":"Or they can be dispatched declaratively using modifiers.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Sample using optional destination","@State var page: SettingsDestinations?","...","Button(\"Modifier Navigate to Page 3!\") {","    page = .page3","}",".navigate(to: $page)","","\/\/ Sample using trigger value","@State var triggerPage3: Bool = false","...","Button(\"Modifier Trigger Page 3!\") {","    triggerPage3.toggle()","}",".navigate(trigger: $triggerPage3, destination: SettingsDestinations.page3)"]},{"inlineContent":[{"type":"text","text":"Or imperatively by asking a Navigator to perform the desired action."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Environment(\\.navigator) var navigator: Navigator","...","Button(\"Button Push Home Page 55\") {","    navigator.push(HomeDestinations.pageN(55))","}","Button(\"Button Navigate To Home Page 55\") {","    navigator.navigate(to: HomeDestinations.pageN(55))","}"]},{"inlineContent":[{"type":"text","text":"In case you’re wondering, calling "},{"type":"codeVoice","code":"push"},{"type":"text","text":" pushes the associate view onto the current "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":", while "},{"code":"Navigate(to:)","type":"codeVoice"},{"text":" will push","type":"text"},{"type":"text","text":" "},{"text":"the view or present the view, based on the ","type":"text"},{"code":"NavigationMethod","type":"codeVoice"},{"type":"text","text":" specified."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Speaking of which…"}]},{"text":"Navigation Methods","type":"heading","anchor":"Navigation-Methods","level":3},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NavigationDestination"},{"text":" can be extended to provide a distinct ","type":"text"},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","type":"reference","isActive":true},{"type":"text","text":" for each enumerated type."}]},{"code":["extension HomeDestinations: NavigationDestination {","    public var method: NavigationMethod {","        switch self {","        case .page3:","            .sheet","        default:","            .push","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, should "},{"type":"codeVoice","code":"navigator.navigate(to: HomeDestinations.page3)"},{"text":" be called, Navigator will automatically present that view in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sheet. All other views will be pushed onto the navigation stack."}]},{"inlineContent":[{"type":"text","text":"The current navigation methods are: .push (default), .sheet, .cover, and .send."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Predefined methods can be overridden using Navigator’s "},{"code":"navigate(to:method:)","type":"codeVoice"},{"type":"text","text":" function."}],"type":"paragraph"},{"code":["Button(\"Present Home Page 55 Via Sheet\") {","    navigator.navigate(to: HomeDestinations.pageN(55), method: .sheet)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that NavigationDestinations dispatched via NavigationLink will ","type":"text"},{"inlineContent":[{"text":"always","type":"text"}],"type":"emphasis"},{"text":" push onto the NavigationStack. That’s just how SwiftUI works.","type":"text"}]},{"type":"heading","level":2,"text":"Values, Not Destinations","anchor":"Values-Not-Destinations"},{"type":"paragraph","inlineContent":[{"text":"Navigator is designed to work with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","type":"reference"},{"text":" types and SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":"; not "},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Mixing the two on the same ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" can lead to unexpected behavior, and using ","type":"text"},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"text":" at all can affect programatic navigation using Navigators.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ DO","NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}","","\/\/ DON'T DO","NavigationLink(destination: HomePage3View()) {","    Text(\"Link to Home Page 3!\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you start seeing odd behavior returning to previous views, check to make sure a ","type":"text"},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"text":" link hasn’t worked its way into your code.","type":"text"}]},{"content":[{"inlineContent":[{"text":"Use NavigationDestination values. Avoid using ","type":"text"},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"important","name":"Important"}]}],"variants":[{"paths":["\/documentation\/navigator\/destinations"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Article","modules":[{"name":"Navigator"}],"role":"article","title":"Destinations"},"abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"references":{"doc://Navigator/documentation/Navigator/Checkpoints":{"title":"Checkpoints","url":"\/documentation\/navigator\/checkpoints","kind":"article","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"role":"article","type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"},"doc://Navigator/documentation/Navigator/NavigationMethod":{"type":"topic","title":"NavigationMethod","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","url":"\/documentation\/navigator\/navigationmethod","abstract":[{"text":"Defines the desired presentation mechanism for a given ","type":"text"},{"type":"codeVoice","code":"NavigationDestination"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationMethod","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"NavigationMethod","kind":"identifier"}]},"doc://Navigator/documentation/Navigator/NavigationTree":{"kind":"article","url":"\/documentation\/navigator\/navigationtree","type":"topic","role":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","title":"Navigation Tree","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}]},"doc://Navigator/documentation/Navigator/AdvancedDestinations":{"title":"Advanced Destinations","url":"\/documentation\/navigator\/advanceddestinations","kind":"article","abstract":[{"type":"text","text":"Building NavigationDestinations that access the environment and other use cases"}],"role":"article","type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"},"doc://Navigator/documentation/Navigator/NavigationDestination":{"navigatorTitle":[{"text":"NavigationDestination","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationDestination","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Provides enumerated navigation types than can be translated into Views."}],"title":"NavigationDestination","kind":"symbol","type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","url":"\/documentation\/navigator\/navigationdestination"},"doc://Navigator/documentation/Navigator":{"url":"\/documentation\/navigator","type":"topic","kind":"symbol","identifier":"doc:\/\/Navigator\/documentation\/Navigator","title":"Navigator","abstract":[{"type":"text","text":"Managed NavigationStacks for SwiftUI."}],"role":"collection"}}}