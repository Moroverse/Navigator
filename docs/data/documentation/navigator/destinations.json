{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Navigator"}],"title":"Destinations"},"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"kind":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations"},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"],"title":"Related Documentation"},{"title":"The Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"],"anchor":"The-Basics","generated":true}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NavigationDestination types can be used in order to push and present views as needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can happen using…"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Standard SwiftUI modifiers like NavigationLink(value:label:)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Imperatively by asking a Navigator to perform the desired action.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Or via a deep link action enabled by a NavigationURLHander."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"They’re one of the core elements that make Navigator possible, and they give us the separation of concerns we mentioned earlier.","type":"text"}],"type":"paragraph"},{"text":"Defining Navigation Destinations","level":3,"anchor":"Defining-Navigation-Destinations","type":"heading"},{"inlineContent":[{"text":"Destinations (or routes) are typically just public lists of enumerated values, one for each view desired.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["public enum HomeDestinations {","    case page2","    case page3","    case pageN(Int)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"SwiftUI requires navigation destination values to be "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":", and so do we. That conformance, however, is satisfied by"},{"text":" ","type":"text"},{"text":"conforming to the protocol NavigationDestination as shown next.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Defining Destination Views","anchor":"Defining-Destination-Views"},{"inlineContent":[{"type":"text","text":"In Navigator we further extend each destination with a variable that returns the correct view for each case."}],"type":"paragraph"},{"code":["extension HomeDestinations: NavigationDestination {","    public var view: some View {","        switch self {","        case .page2:","            HomePage2View()","        case .page3:","            HomePage3View()","        case .pageN(let value):","            HomePageNView(number: value)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is a powerful technique that lets Navigator easily create our views whenever or wherever needed. That could be via "},{"type":"codeVoice","code":"NavigationLink(value:label)"},{"type":"text","text":", or presented via a sheet or fullscreen cover."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note how associated values can be used to pass parameters to views as needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"*To build more complex views that have external dependencies or that require access to environmental values, see "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","isActive":true},{"text":".","type":"text"}]},{"text":"Registering Navigation Destinations","type":"heading","level":3,"anchor":"Registering-Navigation-Destinations"},{"inlineContent":[{"type":"text","text":"Like traditional "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" destination types, "},{"code":"NavigationDestination","type":"codeVoice"},{"type":"text","text":" types need to be registered with the enclosing"},{"text":" ","type":"text"},{"text":"navigation stack in order for ","type":"text"},{"code":"navigate(to:)","type":"codeVoice"},{"type":"text","text":" presentations and standard "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" transitions"},{"type":"text","text":" "},{"type":"text","text":"to work correctly."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But since each "},{"code":"NavigationDestination","type":"codeVoice"},{"text":" already defines the views to be provided, registering destination types can be done","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using a simple one-line view modifier."}]},{"code":["ManagedNavigationStack {","    HomeView()","        .navigationDestination(HomeDestinations.self)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also makes using the same destination type with more than one navigation stack a lot easier."}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Note that registering types more than once in the same NavigationStack isn’t recommended and Navigator will in fact warn you if it see multiple registrations of the same type."}],"type":"emphasis"}],"type":"paragraph"},{"text":"Using Navigation Destinations","level":3,"anchor":"Using-Navigation-Destinations","type":"heading"},{"inlineContent":[{"type":"text","text":"With that out of the way, Navigation Destinations can be dispatched using a standard SwiftUI "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" view."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}"]},{"inlineContent":[{"text":"Or they can be dispatched declaratively using modifiers.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Sample using optional destination","@State var page: SettingsDestinations?","...","Button(\"Modifier Navigate to Page 3!\") {","    page = .page3","}",".navigate(to: $page)","","\/\/ Sample using trigger value","@State var triggerPage3: Bool = false","...","Button(\"Modifier Trigger Page 3!\") {","    triggerPage3.toggle()","}",".navigate(trigger: $triggerPage3, destination: SettingsDestinations.page3)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or imperatively by asking a Navigator to perform the desired action.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Environment(\\.navigator) var navigator: Navigator","...","Button(\"Button Push Home Page 55\") {","    navigator.push(HomeDestinations.pageN(55))","}","Button(\"Button Navigate To Home Page 55\") {","    navigator.navigate(to: HomeDestinations.pageN(55))","}"]},{"type":"paragraph","inlineContent":[{"text":"In case you’re wondering, calling ","type":"text"},{"type":"codeVoice","code":"push"},{"type":"text","text":" pushes the associate view onto the current "},{"type":"codeVoice","code":"NavigationStack"},{"text":", while ","type":"text"},{"type":"codeVoice","code":"Navigate(to:)"},{"type":"text","text":" will push"},{"text":" ","type":"text"},{"type":"text","text":"the view or present the view, based on the "},{"code":"NavigationMethod","type":"codeVoice"},{"type":"text","text":" specified."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Speaking of which…"}]},{"anchor":"Navigation-Methods","text":"Navigation Methods","type":"heading","level":3},{"inlineContent":[{"code":"NavigationDestination","type":"codeVoice"},{"text":" can be extended to provide a distinct ","type":"text"},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","isActive":true,"type":"reference"},{"text":" for each enumerated type.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension HomeDestinations: NavigationDestination {","    public var method: NavigationMethod {","        switch self {","        case .page3:","            .sheet","        default:","            .push","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, should "},{"code":"navigator.navigate(to: HomeDestinations.page3)","type":"codeVoice"},{"type":"text","text":" be called, Navigator will automatically present that view in a"},{"text":" ","type":"text"},{"type":"text","text":"sheet. All other views will be pushed onto the navigation stack."}]},{"type":"paragraph","inlineContent":[{"text":"The current navigation methods are: .push (default), .sheet, .cover, and .send.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Predefined methods can be overridden using Navigator’s "},{"type":"codeVoice","code":"navigate(to:method:)"},{"text":" function.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Button(\"Present Home Page 55 Via Sheet\") {","    navigator.navigate(to: HomeDestinations.pageN(55), method: .sheet)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that NavigationDestinations dispatched via NavigationLink will "},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"type":"text","text":" push onto the NavigationStack. That’s just how SwiftUI works."}]},{"level":2,"text":"Values, Not Destinations","type":"heading","anchor":"Values-Not-Destinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigator is designed to work with "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","isActive":true},{"type":"text","text":" types and SwiftUI’s "},{"code":"NavigationLink(value:label:)","type":"codeVoice"},{"type":"text","text":"; not "},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mixing the two on the same "},{"code":"NavigationStack","type":"codeVoice"},{"text":" can lead to unexpected behavior, and using ","type":"text"},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"text":" at all can affect programatic navigation using Navigators.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ DO","NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}","","\/\/ DON'T DO","NavigationLink(destination: HomePage3View()) {","    Text(\"Link to Home Page 3!\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you start seeing odd behavior returning to previous views, check to make sure a "},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":" link hasn’t worked its way into your code."}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Use NavigationDestination values. Avoid using "},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"Important","style":"important"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/navigator\/destinations"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://Navigator/documentation/Navigator/AdvancedDestinations":{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","type":"topic","url":"\/documentation\/navigator\/advanceddestinations","title":"Advanced Destinations","abstract":[{"text":"Building NavigationDestinations that access the environment and other use cases","type":"text"}],"role":"article","kind":"article"},"doc://Navigator/documentation/Navigator/NavigationDestination":{"kind":"symbol","abstract":[{"text":"Provides enumerated navigation types than can be translated into Views.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationDestination","kind":"identifier"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","role":"symbol","navigatorTitle":[{"text":"NavigationDestination","kind":"identifier"}],"title":"NavigationDestination","url":"\/documentation\/navigator\/navigationdestination","type":"topic"},"doc://Navigator/documentation/Navigator":{"abstract":[{"type":"text","text":"Managed NavigationStacks for SwiftUI."}],"type":"topic","kind":"symbol","url":"\/documentation\/navigator","identifier":"doc:\/\/Navigator\/documentation\/Navigator","title":"Navigator","role":"collection"},"doc://Navigator/documentation/Navigator/Checkpoints":{"role":"article","url":"\/documentation\/navigator\/checkpoints","abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","title":"Checkpoints"},"doc://Navigator/documentation/Navigator/NavigationMethod":{"abstract":[{"type":"text","text":"Defines the desired presentation mechanism for a given "},{"type":"codeVoice","code":"NavigationDestination"},{"type":"text","text":"."}],"url":"\/documentation\/navigator\/navigationmethod","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationMethod"}],"kind":"symbol","navigatorTitle":[{"text":"NavigationMethod","kind":"identifier"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","title":"NavigationMethod","role":"symbol"}}}