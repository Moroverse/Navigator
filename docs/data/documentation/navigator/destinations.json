{"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"metadata":{"title":"Destinations","modules":[{"name":"Navigator"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"],"generated":true,"anchor":"The-Basics","title":"The Basics"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"NavigationDestination types can be used in order to push and present views as needed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This can happen using…","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Standard SwiftUI modifiers like NavigationLink(value:label:)."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Imperatively by asking a Navigator to perform the desired action."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Or via a deep link action enabled by a NavigationURLHander."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"They’re one of the core elements that make Navigator possible, and they give us the separation of concerns we mentioned earlier."}]},{"text":"Defining Navigation Destinations","level":3,"anchor":"Defining-Navigation-Destinations","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Destinations (or routes) are typically just public lists of enumerated values, one for each view desired."}]},{"type":"codeListing","syntax":"swift","code":["public enum HomeDestinations {","    case page2","    case page3","    case pageN(Int)","}"]},{"inlineContent":[{"text":"SwiftUI requires navigation destination values to be ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":", and so do we. That conformance, however, is satisfied by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conforming to the protocol NavigationDestination as shown next."}],"type":"paragraph"},{"level":3,"text":"Defining Destination Views","type":"heading","anchor":"Defining-Destination-Views"},{"inlineContent":[{"text":"In Navigator we further extend each destination with a variable that returns the correct view for each case.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension HomeDestinations: NavigationDestination {","    public var view: some View {","        switch self {","        case .page2:","            HomePage2View()","        case .page3:","            HomePage3View()","        case .pageN(let value):","            HomePageNView(number: value)","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"This is a powerful technique that lets Navigator easily create our views whenever or wherever needed. That could be via "},{"type":"codeVoice","code":"NavigationLink(value:label)"},{"type":"text","text":", or presented via a sheet or fullscreen cover."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note how associated values can be used to pass parameters to views as needed."}]},{"type":"paragraph","inlineContent":[{"text":"*To build more complex views that have external dependencies or that require access to environmental values, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"},{"text":".","type":"text"}]},{"anchor":"Registering-Navigation-Destinations","level":3,"type":"heading","text":"Registering Navigation Destinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like traditional "},{"code":"NavigationStack","type":"codeVoice"},{"text":" destination types, ","type":"text"},{"code":"NavigationDestination","type":"codeVoice"},{"type":"text","text":" types need to be registered with the enclosing"},{"text":" ","type":"text"},{"text":"navigation stack in order for ","type":"text"},{"type":"codeVoice","code":"navigate(to:)"},{"type":"text","text":" presentations and standard "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" transitions"},{"text":" ","type":"text"},{"type":"text","text":"to work correctly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But since each "},{"type":"codeVoice","code":"NavigationDestination"},{"text":" already defines the views to be provided, registering destination types can be done","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using a simple one-line view modifier."}]},{"type":"codeListing","syntax":"swift","code":["ManagedNavigationStack {","    HomeView()","        .navigationDestination(HomeDestinations.self)","}"]},{"inlineContent":[{"text":"This also makes using the same destination type with more than one navigation stack a lot easier.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Note that registering types more than once in the same NavigationStack isn’t recommended and Navigator will in fact warn you if it see multiple registrations of the same type.","type":"text"}]}]},{"level":3,"anchor":"Using-Navigation-Destinations","type":"heading","text":"Using Navigation Destinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that out of the way, Navigation Destinations can be dispatched using a standard SwiftUI "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"text":" view.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or they can be dispatched declaratively using modifiers."}]},{"code":["\/\/ Sample using optional destination","@State var page: SettingsDestinations?","...","Button(\"Modifier Navigate to Page 3!\") {","    page = .page3","}",".navigate(to: $page)","","\/\/ Sample using trigger value","@State var triggerPage3: Bool = false","...","Button(\"Modifier Trigger Page 3!\") {","    triggerPage3.toggle()","}",".navigate(trigger: $triggerPage3, destination: SettingsDestinations.page3)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or imperatively by asking a Navigator to perform the desired action.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Environment(\\.navigator) var navigator: Navigator","...","Button(\"Button Push Home Page 55\") {","    navigator.push(HomeDestinations.pageN(55))","}","Button(\"Button Navigate To Home Page 55\") {","    navigator.navigate(to: HomeDestinations.pageN(55))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In case you’re wondering, calling "},{"type":"codeVoice","code":"push"},{"type":"text","text":" pushes the associate view onto the current "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":", while "},{"type":"codeVoice","code":"Navigate(to:)"},{"type":"text","text":" will push"},{"type":"text","text":" "},{"text":"the view or present the view, based on the ","type":"text"},{"code":"NavigationMethod","type":"codeVoice"},{"text":" specified.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Speaking of which…"}],"type":"paragraph"},{"anchor":"Navigation-Methods","type":"heading","level":3,"text":"Navigation Methods"},{"inlineContent":[{"code":"NavigationDestination","type":"codeVoice"},{"text":" can be extended to provide a distinct ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","type":"reference"},{"type":"text","text":" for each enumerated type."}],"type":"paragraph"},{"type":"codeListing","code":["extension HomeDestinations: NavigationDestination {","    public var method: NavigationMethod {","        switch self {","        case .page3:","            .sheet","        default:","            .push","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this case, should ","type":"text"},{"type":"codeVoice","code":"navigator.navigate(to: HomeDestinations.page3)"},{"type":"text","text":" be called, Navigator will automatically present that view in a"},{"text":" ","type":"text"},{"type":"text","text":"sheet. All other views will be pushed onto the navigation stack."}]},{"inlineContent":[{"text":"The current navigation methods are: .push (default), .sheet, .cover, and .send.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Predefined methods can be overridden using Navigator’s ","type":"text"},{"type":"codeVoice","code":"navigate(to:method:)"},{"text":" function.","type":"text"}]},{"code":["Button(\"Present Home Page 55 Via Sheet\") {","    navigator.navigate(to: HomeDestinations.pageN(55), method: .sheet)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that NavigationDestinations dispatched via NavigationLink will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"type":"text","text":" push onto the NavigationStack. That’s just how SwiftUI works."}],"type":"paragraph"},{"anchor":"Values-Not-Destinations","text":"Values, Not Destinations","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Navigator is designed to work with "},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","type":"reference","isActive":true},{"text":" types and SwiftUI’s ","type":"text"},{"code":"NavigationLink(value:label:)","type":"codeVoice"},{"text":"; not ","type":"text"},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Mixing the two on the same ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" can lead to unexpected behavior, and using "},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":" at all can affect programatic navigation using Navigators."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ DO","NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}","","\/\/ DON'T DO","NavigationLink(destination: HomePage3View()) {","    Text(\"Link to Home Page 3!\")","}"]},{"type":"paragraph","inlineContent":[{"text":"If you start seeing odd behavior returning to previous views, check to make sure a ","type":"text"},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"type":"text","text":" link hasn’t worked its way into your code."}]},{"content":[{"inlineContent":[{"type":"text","text":"Use NavigationDestination values. Avoid using "},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Important","style":"important"}]}],"variants":[{"paths":["\/documentation\/navigator\/destinations"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations"},"abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"references":{"doc://Navigator/documentation/Navigator/AdvancedDestinations":{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","role":"article","url":"\/documentation\/navigator\/advanceddestinations","abstract":[{"type":"text","text":"Building NavigationDestinations that access the environment and other use cases"}],"type":"topic","kind":"article","title":"Advanced Destinations"},"doc://Navigator/documentation/Navigator/NavigationDestination":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationDestination","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"NavigationDestination"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","title":"NavigationDestination","url":"\/documentation\/navigator\/navigationdestination","abstract":[{"type":"text","text":"Provides enumerated navigation types than can be translated into Views."}],"role":"symbol","type":"topic","kind":"symbol"},"doc://Navigator/documentation/Navigator/Checkpoints":{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","role":"article","url":"\/documentation\/navigator\/checkpoints","abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"type":"topic","kind":"article","title":"Checkpoints"},"doc://Navigator/documentation/Navigator/NavigationMethod":{"navigatorTitle":[{"kind":"identifier","text":"NavigationMethod"}],"title":"NavigationMethod","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationMethod"}],"type":"topic","url":"\/documentation\/navigator\/navigationmethod","abstract":[{"type":"text","text":"Defines the desired presentation mechanism for a given "},{"code":"NavigationDestination","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol"},"doc://Navigator/documentation/Navigator":{"title":"Navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"url":"\/documentation\/navigator","identifier":"doc:\/\/Navigator\/documentation\/Navigator","type":"topic","kind":"symbol","role":"collection"}}}