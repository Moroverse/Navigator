{"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"NavigationDestination types can be used in order to push and present views as needed.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This can happen using…"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard SwiftUI modifiers like NavigationLink(value:label:)."}]}]},{"content":[{"inlineContent":[{"text":"Imperatively by asking a Navigator to perform the desired action.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Or via a deep link action enabled by a NavigationURLHander.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"They’re one of the core elements that make Navigator possible, and they give us the separation of concerns we mentioned earlier.","type":"text"}]},{"level":3,"anchor":"Defining-Navigation-Destinations","text":"Defining Navigation Destinations","type":"heading"},{"inlineContent":[{"type":"text","text":"Destinations (or routes) are typically just public lists of enumerated values, one for each view desired."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public enum HomeDestinations {","    case page2","    case page3","    case pageN(Int)","}"]},{"type":"paragraph","inlineContent":[{"text":"SwiftUI requires navigation destination values to be ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and so do we. That conformance, however, is satisfied by"},{"type":"text","text":" "},{"text":"conforming to the protocol NavigationDestination as shown next.","type":"text"}]},{"text":"Defining Destination Views","anchor":"Defining-Destination-Views","type":"heading","level":3},{"inlineContent":[{"text":"In Navigator we further extend each destination with a variable that returns the correct view for each case.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension HomeDestinations: NavigationDestination {","    public var view: some View {","        switch self {","        case .page2:","            HomePage2View()","        case .page3:","            HomePage3View()","        case .pageN(let value):","            HomePageNView(number: value)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is a powerful technique that lets Navigator easily create our views whenever or wherever needed. That could be via ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label)"},{"text":", or presented via a sheet or fullscreen cover.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Note how associated values can be used to pass parameters to views as needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"*To build more complex views that have external dependencies or that require access to environmental values, see "},{"isActive":true,"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","type":"reference"},{"type":"text","text":"."}]},{"level":3,"text":"Registering Navigation Destinations","anchor":"Registering-Navigation-Destinations","type":"heading"},{"inlineContent":[{"type":"text","text":"Like traditional "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" destination types, "},{"code":"NavigationDestination","type":"codeVoice"},{"text":" types need to be registered with the enclosing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"navigation stack in order for "},{"code":"navigate(to:)","type":"codeVoice"},{"text":" presentations and standard ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" transitions"},{"type":"text","text":" "},{"text":"to work correctly.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"But since each ","type":"text"},{"code":"NavigationDestination","type":"codeVoice"},{"type":"text","text":" already defines the views to be provided, registering destination types can be done"},{"text":" ","type":"text"},{"type":"text","text":"using a simple one-line view modifier."}]},{"type":"codeListing","syntax":"swift","code":["ManagedNavigationStack {","    HomeView()","        .navigationDestination(HomeDestinations.self)","}"]},{"inlineContent":[{"text":"This also makes using the same destination type with more than one navigation stack a lot easier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Note that registering types more than once in the same NavigationStack isn’t recommended and Navigator will in fact warn you if it see multiple registrations of the same type."}]}],"type":"paragraph"},{"text":"Using Navigation Destinations","anchor":"Using-Navigation-Destinations","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"With that out of the way, Navigation Destinations can be dispatched using a standard SwiftUI ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"text":" view.","type":"text"}]},{"code":["NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or they can be dispatched declaratively using modifiers."}]},{"syntax":"swift","code":["\/\/ Sample using optional destination","@State var page: SettingsDestinations?","...","Button(\"Modifier Navigate to Page 3!\") {","    page = .page3","}",".navigate(to: $page)","","\/\/ Sample using trigger value","@State var triggerPage3: Bool = false","...","Button(\"Modifier Trigger Page 3!\") {","    triggerPage3.toggle()","}",".navigate(trigger: $triggerPage3, destination: SettingsDestinations.page3)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or imperatively by asking a Navigator to perform the desired action.","type":"text"}]},{"syntax":"swift","code":["@Environment(\\.navigator) var navigator: Navigator","...","Button(\"Button Push Home Page 55\") {","    navigator.push(HomeDestinations.pageN(55))","}","Button(\"Button Navigate To Home Page 55\") {","    navigator.navigate(to: HomeDestinations.pageN(55))","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In case you’re wondering, calling "},{"type":"codeVoice","code":"push"},{"text":" pushes the associate view onto the current ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":", while ","type":"text"},{"code":"Navigate(to:)","type":"codeVoice"},{"text":" will push","type":"text"},{"type":"text","text":" "},{"text":"the view or present the view, based on the ","type":"text"},{"type":"codeVoice","code":"NavigationMethod"},{"type":"text","text":" specified."}]},{"inlineContent":[{"type":"text","text":"Speaking of which…"}],"type":"paragraph"},{"type":"heading","text":"Navigation Methods","level":3,"anchor":"Navigation-Methods"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NavigationDestination"},{"text":" can be extended to provide a distinct ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod"},{"type":"text","text":" for each enumerated type."}]},{"syntax":"swift","code":["extension HomeDestinations: NavigationDestination {","    public var method: NavigationMethod {","        switch self {","        case .page3:","            .sheet","        default:","            .push","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this case, should "},{"code":"navigator.navigate(to: HomeDestinations.page3)","type":"codeVoice"},{"type":"text","text":" be called, Navigator will automatically present that view in a"},{"type":"text","text":" "},{"type":"text","text":"sheet. All other views will be pushed onto the navigation stack."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The current navigation methods are: .push (default), .sheet, .cover, and .send.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Predefined methods can be overridden using Navigator’s "},{"code":"navigate(to:method:)","type":"codeVoice"},{"text":" function.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Button(\"Present Home Page 55 Via Sheet\") {","    navigator.navigate(to: HomeDestinations.pageN(55), method: .sheet)","}"]},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"NavigationDestinations dispatched via NavigationLink will "},{"type":"emphasis","inlineContent":[{"text":"always","type":"text"}]},{"type":"text","text":" push onto the NavigationStack. That’s just how SwiftUI works."}]}],"type":"aside","style":"important"}]}],"kind":"article","metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Navigator"}],"title":"Destinations"},"abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"],"title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"],"anchor":"The-Basics","title":"The Basics"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigator\/destinations"]}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations"},"references":{"doc://Navigator/documentation/Navigator/AdvancedDestinations":{"url":"\/documentation\/navigator\/advanceddestinations","title":"Advanced Destinations","role":"article","type":"topic","abstract":[{"type":"text","text":"Building NavigationDestinations that access the environment and other use cases"}],"kind":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"},"doc://Navigator/documentation/Navigator":{"kind":"symbol","url":"\/documentation\/navigator","title":"Navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator","role":"collection","type":"topic"},"doc://Navigator/documentation/Navigator/Checkpoints":{"url":"\/documentation\/navigator\/checkpoints","title":"Checkpoints","type":"topic","kind":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"role":"article"},"doc://Navigator/documentation/Navigator/NavigationMethod":{"abstract":[{"type":"text","text":"Defines the desired presentation mechanism for a given "},{"type":"codeVoice","code":"NavigationDestination"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NavigationMethod"}],"kind":"symbol","url":"\/documentation\/navigator\/navigationmethod","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","title":"NavigationMethod","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"NavigationMethod","kind":"identifier"}],"type":"topic"}}}