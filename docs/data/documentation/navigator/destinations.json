{"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Navigator"}],"title":"Destinations","role":"article"},"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"NavigationDestination types can be used in order to push and present views as needed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can happen using…"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Standard SwiftUI modifiers like NavigationLink(value:label:).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Imperatively by asking a Navigator to perform the desired action."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Or via a deep link action enabled by a NavigationURLHander."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"They’re one of the core elements that make Navigator possible, and they give us the separation of concerns we mentioned earlier.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Defining Navigation Destinations","anchor":"Defining-Navigation-Destinations","level":3},{"inlineContent":[{"text":"Destinations (or routes) are typically just public lists of enumerated values, one for each view desired.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public enum HomeDestinations {","    case page2","    case page3","    case pageN(Int)","}"]},{"inlineContent":[{"type":"text","text":"SwiftUI requires navigation destination values to be "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and so do we. That conformance, however, is satisfied by"},{"type":"text","text":" "},{"type":"text","text":"conforming to the protocol NavigationDestination as shown next."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Defining-Destination-Views","text":"Defining Destination Views"},{"inlineContent":[{"type":"text","text":"In Navigator we further extend each destination with a variable that returns the correct view for each case."}],"type":"paragraph"},{"syntax":"swift","code":["extension HomeDestinations: NavigationDestination {","    public var view: some View {","        switch self {","        case .page2:","            HomePage2View()","        case .page3:","            HomePage3View()","        case .pageN(let value):","            HomePageNView(number: value)","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is a powerful technique that lets Navigator easily create our views whenever or wherever needed. That could be via "},{"type":"codeVoice","code":"NavigationLink(value:label)"},{"type":"text","text":", or presented via a sheet or fullscreen cover."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note how associated values can be used to pass parameters to views as needed."}]},{"inlineContent":[{"type":"text","text":"*To build more complex views that have external dependencies or that require access to environmental values, see "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Registering Navigation Destinations","type":"heading","anchor":"Registering-Navigation-Destinations","level":3},{"inlineContent":[{"text":"Like traditional ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" destination types, "},{"type":"codeVoice","code":"NavigationDestination"},{"text":" types need to be registered with the enclosing","type":"text"},{"type":"text","text":" "},{"text":"navigation stack in order for ","type":"text"},{"code":"navigate(to:)","type":"codeVoice"},{"text":" presentations and standard ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" transitions"},{"type":"text","text":" "},{"text":"to work correctly.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But since each "},{"type":"codeVoice","code":"NavigationDestination"},{"type":"text","text":" already defines the views to be provided, registering destination types can be done"},{"text":" ","type":"text"},{"type":"text","text":"using a simple one-line view modifier."}]},{"code":["ManagedNavigationStack {","    HomeView()","        .navigationDestination(HomeDestinations.self)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also makes using the same destination type with more than one navigation stack a lot easier."}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Note that registering types more than once in the same NavigationStack isn’t recommended and Navigator will in fact warn you if it see multiple registrations of the same type."}]}],"type":"paragraph"},{"type":"heading","text":"Using Navigation Destinations","level":3,"anchor":"Using-Navigation-Destinations"},{"inlineContent":[{"type":"text","text":"With that out of the way, Navigation Destinations can be dispatched using a standard SwiftUI "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" view."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or they can be dispatched declaratively using modifiers."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Sample using optional destination","@State var page: SettingsDestinations?","...","Button(\"Modifier Navigate to Page 3!\") {","    page = .page3","}",".navigate(to: $page)","","\/\/ Sample using trigger value","@State var triggerPage3: Bool = false","...","Button(\"Modifier Trigger Page 3!\") {","    triggerPage3.toggle()","}",".navigate(trigger: $triggerPage3, destination: SettingsDestinations.page3)"]},{"type":"paragraph","inlineContent":[{"text":"Or imperatively by asking a Navigator to perform the desired action.","type":"text"}]},{"syntax":"swift","code":["@Environment(\\.navigator) var navigator: Navigator","...","Button(\"Button Push Home Page 55\") {","    navigator.push(HomeDestinations.pageN(55))","}","Button(\"Button Navigate To Home Page 55\") {","    navigator.navigate(to: HomeDestinations.pageN(55))","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In case you’re wondering, calling ","type":"text"},{"type":"codeVoice","code":"push"},{"type":"text","text":" pushes the associate view onto the current "},{"type":"codeVoice","code":"NavigationStack"},{"text":", while ","type":"text"},{"code":"Navigate(to:)","type":"codeVoice"},{"text":" will push","type":"text"},{"text":" ","type":"text"},{"text":"the view or present the view, based on the ","type":"text"},{"type":"codeVoice","code":"NavigationMethod"},{"type":"text","text":" specified."}]},{"inlineContent":[{"type":"text","text":"Speaking of which…"}],"type":"paragraph"},{"text":"Navigation Methods","level":3,"anchor":"Navigation-Methods","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"NavigationDestination"},{"type":"text","text":" can be extended to provide a distinct "},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","type":"reference","isActive":true},{"type":"text","text":" for each enumerated type."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension HomeDestinations: NavigationDestination {","    public var method: NavigationMethod {","        switch self {","        case .page3:","            .sheet","        default:","            .push","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"In this case, should "},{"code":"navigator.navigate(to: HomeDestinations.page3)","type":"codeVoice"},{"text":" be called, Navigator will automatically present that view in a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sheet. All other views will be pushed onto the navigation stack."}],"type":"paragraph"},{"inlineContent":[{"text":"The current navigation methods are: .push (default), .sheet, .cover, and .send.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Predefined methods can be overridden using Navigator’s "},{"type":"codeVoice","code":"navigate(to:method:)"},{"text":" function.","type":"text"}]},{"type":"codeListing","code":["Button(\"Present Home Page 55 Via Sheet\") {","    navigator.navigate(to: HomeDestinations.pageN(55), method: .sheet)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that NavigationDestinations dispatched via NavigationLink will ","type":"text"},{"inlineContent":[{"text":"always","type":"text"}],"type":"emphasis"},{"text":" push onto the NavigationStack. That’s just how SwiftUI works.","type":"text"}]},{"text":"Values, Not Destinations","level":2,"type":"heading","anchor":"Values-Not-Destinations"},{"type":"paragraph","inlineContent":[{"text":"Navigator is designed to work with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination"},{"text":" types and SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"text":"; not ","type":"text"},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Mixing the two on the same ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" can lead to unexpected behavior, and using "},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"text":" at all can affect programatic navigation using Navigators.","type":"text"}]},{"code":["\/\/ DO","NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}","","\/\/ DON'T DO","NavigationLink(destination: HomePage3View()) {","    Text(\"Link to Home Page 3!\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you start seeing odd behavior returning to previous views, check to make sure a ","type":"text"},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"text":" link hasn’t worked its way into your code.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"Use NavigationDestination values. Avoid using ","type":"text"},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"important","type":"aside","name":"Important"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations"],"anchor":"Related-Documentation","title":"Related Documentation"},{"title":"The Basics","anchor":"The-Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigator\/destinations"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations"},"references":{"doc://Navigator/documentation/Navigator/AdvancedDestinations":{"role":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/AdvancedDestinations","kind":"article","url":"\/documentation\/navigator\/advanceddestinations","abstract":[{"type":"text","text":"Building NavigationDestinations that access the environment and other use cases"}],"title":"Advanced Destinations","type":"topic"},"doc://Navigator/documentation/Navigator/NavigationMethod":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"NavigationMethod","kind":"identifier"}],"url":"\/documentation\/navigator\/navigationmethod","abstract":[{"type":"text","text":"Defines the desired presentation mechanism for a given "},{"code":"NavigationDestination","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","title":"NavigationMethod","type":"topic","navigatorTitle":[{"text":"NavigationMethod","kind":"identifier"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationMethod","role":"symbol"},"doc://Navigator/documentation/Navigator/Checkpoints":{"role":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","kind":"article","url":"\/documentation\/navigator\/checkpoints","abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"title":"Checkpoints","type":"topic"},"doc://Navigator/documentation/Navigator/NavigationDestination":{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationDestination","type":"topic","url":"\/documentation\/navigator\/navigationdestination","abstract":[{"text":"Provides enumerated navigation types than can be translated into Views.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"NavigationDestination","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"NavigationDestination"}],"title":"NavigationDestination","kind":"symbol"},"doc://Navigator/documentation/Navigator":{"title":"Navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Navigator\/documentation\/Navigator","url":"\/documentation\/navigator","role":"collection"}}}