{"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/navigator\/checkpoints"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and fragile. One could pass bindings down the tree, but that can be equally problematic at worst, and cumbersome at best.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return.","type":"text"}]},{"text":"Examples","type":"heading","level":2,"anchor":"Examples"},{"type":"heading","level":3,"anchor":"Defining-a-Checkpoint","text":"Defining a Checkpoint"},{"inlineContent":[{"type":"text","text":"Checkpoints are easy to define and use. Let’s create one called “home”."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension NavigationCheckpoint {","    public static let home: NavigationCheckpoint = \"myApp.home\"","}"]},{"type":"heading","level":3,"anchor":"Establishing-a-Checkpoint","text":"Establishing a Checkpoint"},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"text":"Returning to a Checkpoint","level":3,"type":"heading","anchor":"Returning-to-a-Checkpoint"},{"inlineContent":[{"text":"Once defined, they’re easy to use.","type":"text"}],"type":"paragraph"},{"code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(.home)","}",".disabled(!navigator.canReturnToCheckpoint(.home))"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired.","type":"text"}]},{"level":2,"anchor":"Advanced-Checkpoints","type":"heading","text":"Advanced Checkpoints"},{"text":"Returning values to a Checkpoint","anchor":"Returning-values-to-a-Checkpoint","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Checkpoints can also be used to return values to a caller."}],"type":"paragraph"},{"inlineContent":[{"text":"First we establish our checkpoint, but also adding a handler that receives a specific value type.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(.settings) { (result: Int?) in","    returnValue = result","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"code":"returnToCheckpoint","type":"codeVoice"},{"type":"text","text":" as usual, but in this case passing our return value as well."}]},{"code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(.settings, value: 5)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This comes in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called.","type":"text"}]}],"type":"aside","name":"Important","style":"important"},{"inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}],"type":"paragraph"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Destinations"],"generated":true,"title":"The Basics","anchor":"The-Basics"}],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Navigator"}],"roleHeading":"Article","role":"article","title":"Checkpoints"},"references":{"doc://Navigator/documentation/Navigator/Destinations":{"type":"topic","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"title":"Destinations","url":"\/documentation\/navigator\/destinations","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","kind":"article","role":"article"},"doc://Navigator/documentation/Navigator":{"kind":"symbol","url":"\/documentation\/navigator","title":"Navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator","role":"collection","type":"topic"}}}