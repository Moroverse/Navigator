{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on."}],"type":"paragraph"},{"code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Examples","type":"heading","text":"Examples"},{"type":"heading","anchor":"Defining-a-Checkpoint","level":3,"text":"Defining a Checkpoint"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkpoints are easy to define and use. Let’s create one called “home”."}]},{"code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var home: NavigationCheckpoint<Void> { checkpoint() }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Just conform your definitions to ","type":"text"},{"code":"NavigationCheckpoints","type":"codeVoice"},{"text":" and specify the return type of the checkpoint (or void if none).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Using "},{"code":"{ checkpoint() }","type":"codeVoice"},{"type":"text","text":" ensures a checkpoint definition and name that’s unique. Here, that’s "},{"type":"codeVoice","code":"KnownCheckpoints.home.()"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Establishing-a-Checkpoint","level":3,"type":"heading","text":"Establishing a Checkpoint"},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(KnownCheckpoints..home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"text":"Returning to a Checkpoint","type":"heading","anchor":"Returning-to-a-Checkpoint","level":3},{"inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}],"type":"paragraph"},{"code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(KnownCheckpoints.home)","}",".disabled(!navigator.canReturnToCheckpoint(KnownCheckpoints.home))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired."}],"type":"paragraph"},{"text":"Advanced Checkpoints","type":"heading","level":2,"anchor":"Advanced-Checkpoints"},{"level":3,"text":"Returning values to a Checkpoint","anchor":"Returning-values-to-a-Checkpoint","type":"heading"},{"inlineContent":[{"type":"text","text":"Checkpoints can also be used to return values to a caller."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As before we define our checkpoint, specifying the return value type."}]},{"code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var settings: NavigationCheckpoint<Int> { checkpoint() }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"We then establish our checkpoint, but this time we add a handler that receives our value type.","type":"text"}]},{"code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(KnownCheckpoints.settings) { result in","    returnValue = result","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"type":"codeVoice","code":"returnToCheckpoint"},{"text":" as usual, but in this case passing our return value as well.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(KnownCheckpoints.settings, value: 5)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value type returned must match the checkpoint definition, otherwise you’ll get a compiler error."}]},{"inlineContent":[{"type":"text","text":"Checkpoint return values come in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}],"type":"paragraph"},{"type":"aside","name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}]}]}],"kind":"article","variants":[{"paths":["\/documentation\/navigator\/checkpoints"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"anchor":"The-Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","doc:\/\/Navigator\/documentation\/Navigator\/Destinations"],"generated":true,"title":"The Basics"}],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Navigator"}],"title":"Checkpoints"},"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"references":{"doc://Navigator/documentation/Navigator/NavigationTree":{"url":"\/documentation\/navigator\/navigationtree","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"title":"Navigation Tree"},"doc://Navigator/documentation/Navigator":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator","url":"\/documentation\/navigator","role":"collection","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"Navigator"},"doc://Navigator/documentation/Navigator/Destinations":{"role":"article","title":"Destinations","url":"\/documentation\/navigator\/destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","kind":"article"}}}