{"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Destinations"],"title":"The Basics","anchor":"The-Basics","generated":true}],"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and fragile. One could pass bindings down the tree, but that can be equally problematic at worst, and cumbersome at best."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return."}]},{"text":"Examples","level":2,"type":"heading","anchor":"Examples"},{"anchor":"Defining-a-Checkpoint","level":3,"text":"Defining a Checkpoint","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension NavigationCheckpoint {","    public static let home: NavigationCheckpoint = \"myApp.home\"","}"]},{"level":3,"text":"Establishing a Checkpoint","type":"heading","anchor":"Establishing-a-Checkpoint"},{"inlineContent":[{"text":"Now lets attach that checkpoint to our home view.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"level":3,"type":"heading","text":"Returning to a Checkpoint","anchor":"Returning-to-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(.home)","}",".disabled(!navigator.canReturnToCheckpoint(.home))"]},{"type":"paragraph","inlineContent":[{"text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired.","type":"text"}]},{"text":"Advanced Checkpoints","level":2,"anchor":"Advanced-Checkpoints","type":"heading"},{"text":"Returning values to a Checkpoint","type":"heading","anchor":"Returning-values-to-a-Checkpoint","level":3},{"inlineContent":[{"text":"Checkpoints can also be used to return values to a caller.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"First we establish our checkpoint, but also adding a handler that receives a specific value type.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(.settings) { (result: Int?) in","    returnValue = result","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"code":"returnToCheckpoint","type":"codeVoice"},{"type":"text","text":" as usual, but in this case passing our return value as well."}],"type":"paragraph"},{"code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(.settings, value: 5)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This comes in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}]},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"role":"article","modules":[{"name":"Navigator"}],"title":"Checkpoints","roleHeading":"Article"},"variants":[{"paths":["\/documentation\/navigator\/checkpoints"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"},"references":{"doc://Navigator/documentation/Navigator/Destinations":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/navigator\/destinations","title":"Destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations"},"doc://Navigator/documentation/Navigator":{"title":"Navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"url":"\/documentation\/navigator","identifier":"doc:\/\/Navigator\/documentation\/Navigator","type":"topic","kind":"symbol","role":"collection"}}}