{"seeAlsoSections":[{"generated":true,"title":"The Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","doc:\/\/Navigator\/documentation\/Navigator\/Destinations","doc:\/\/Navigator\/documentation\/Navigator\/Dismissible"],"anchor":"The-Basics"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"variants":[{"paths":["\/documentation\/navigator\/checkpoints"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"},"sections":[],"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on.","type":"text"}]},{"code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return."}],"type":"paragraph"},{"text":"Examples","type":"heading","level":2,"anchor":"Examples"},{"text":"Defining a Checkpoint","type":"heading","anchor":"Defining-a-Checkpoint","level":3},{"type":"paragraph","inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}]},{"syntax":"swift","code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var home: NavigationCheckpoint<Void> { checkpoint() }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Just conform your definitions to ","type":"text"},{"type":"codeVoice","code":"NavigationCheckpoints"},{"type":"text","text":" and specify the return type of the checkpoint (or void if none)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"code":"{ checkpoint() }","type":"codeVoice"},{"type":"text","text":" ensures a checkpoint definition and name that’s unique. Here, that’s "},{"type":"codeVoice","code":"KnownCheckpoints.home.()"},{"type":"text","text":"."}]},{"type":"heading","text":"Establishing a Checkpoint","anchor":"Establishing-a-Checkpoint","level":3},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(KnownCheckpoints.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"text":"Returning to a Checkpoint","type":"heading","anchor":"Returning-to-a-Checkpoint","level":3},{"type":"paragraph","inlineContent":[{"text":"Once defined, they’re easy to use.","type":"text"}]},{"code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(KnownCheckpoints.home)","}",".disabled(!navigator.canReturnToCheckpoint(KnownCheckpoints.home))"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired."}]},{"text":"Advanced Checkpoints","anchor":"Advanced-Checkpoints","level":2,"type":"heading"},{"anchor":"Returning-values-to-a-Checkpoint","level":3,"text":"Returning values to a Checkpoint","type":"heading"},{"inlineContent":[{"text":"Checkpoints can also be used to return values to a caller.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As before we define our checkpoint, specifying the return value type.","type":"text"}]},{"code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var settings: NavigationCheckpoint<Int> { checkpoint() }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We then establish our checkpoint, but this time we add a handler that receives our value type.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(KnownCheckpoints.settings) { result in","    returnValue = result","}"]},{"inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"type":"codeVoice","code":"returnToCheckpoint"},{"text":" as usual, but in this case passing our return value as well.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(KnownCheckpoints.settings, value: 5)","}"]},{"inlineContent":[{"text":"The value type returned must match the checkpoint definition, otherwise you’ll get a compiler error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Checkpoint return values come in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}],"type":"paragraph"},{"style":"important","name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"Checkpoints are a powerful tool. Use them.","type":"text"}]}]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Navigator"}],"title":"Checkpoints"},"references":{"doc://Navigator/documentation/Navigator":{"url":"\/documentation\/navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"Navigator","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/Navigator\/documentation\/Navigator"},"doc://Navigator/documentation/Navigator/Destinations":{"role":"article","type":"topic","kind":"article","title":"Destinations","url":"\/documentation\/navigator\/destinations","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}]},"doc://Navigator/documentation/Navigator/NavigationTree":{"title":"Understanding The Navigation Tree","url":"\/documentation\/navigator\/navigationtree","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"role":"article","type":"topic","kind":"article"},"doc://Navigator/documentation/Navigator/Dismissible":{"role":"article","title":"Dismissible Views","kind":"article","url":"\/documentation\/navigator\/dismissible","type":"topic","abstract":[{"type":"text","text":"Understanding dismissible views and their role in application navigation and deep linking."}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Dismissible"}}}