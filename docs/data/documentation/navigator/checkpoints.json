{"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Navigator"}],"title":"Checkpoints"},"sections":[],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on."}],"type":"paragraph"},{"code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree."}]},{"inlineContent":[{"type":"text","text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return.","type":"text"}]},{"text":"Examples","anchor":"Examples","level":2,"type":"heading"},{"anchor":"Defining-a-Checkpoint","level":3,"text":"Defining a Checkpoint","type":"heading"},{"inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}],"type":"paragraph"},{"code":["extension NavigationCheckpoint {","    public static let home: NavigationCheckpoint = \"myApp.home\"","}"],"syntax":"swift","type":"codeListing"},{"text":"Establishing a Checkpoint","level":3,"type":"heading","anchor":"Establishing-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"level":3,"anchor":"Returning-to-a-Checkpoint","type":"heading","text":"Returning to a Checkpoint"},{"inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(.home)","}",".disabled(!navigator.canReturnToCheckpoint(.home))"]},{"inlineContent":[{"type":"text","text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired."}],"type":"paragraph"},{"text":"Advanced Checkpoints","anchor":"Advanced-Checkpoints","type":"heading","level":2},{"anchor":"Returning-values-to-a-Checkpoint","type":"heading","level":3,"text":"Returning values to a Checkpoint"},{"inlineContent":[{"text":"Checkpoints can also be used to return values to a caller.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As before we establish our checkpoint, but this time we add a handler that receives a specific value type.","type":"text"}]},{"type":"codeListing","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(.settings) { (result: Int) in","    returnValue = result","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And then later on when we’re ready to return we call ","type":"text"},{"type":"codeVoice","code":"returnToCheckpoint"},{"type":"text","text":" as usual, but in this case passing our return value as well."}]},{"code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(.settings, value: 5)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This comes in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}]}],"name":"Important","style":"important"},{"inlineContent":[{"text":"Checkpoints are a powerful tool. Use them.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"seeAlsoSections":[{"anchor":"The-Basics","generated":true,"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","doc:\/\/Navigator\/documentation\/Navigator\/Destinations"],"title":"The Basics"}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigator\/checkpoints"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://Navigator/documentation/Navigator/NavigationTree":{"kind":"article","abstract":[{"type":"text","text":"To get the most out of Navigator, you need to understand the navigation tree where its Navigators live."}],"type":"topic","url":"\/documentation\/navigator\/navigationtree","role":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","title":"The Navigation Tree"},"doc://Navigator/documentation/Navigator":{"identifier":"doc:\/\/Navigator\/documentation\/Navigator","role":"collection","title":"Navigator","url":"\/documentation\/navigator","kind":"symbol","type":"topic","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}]},"doc://Navigator/documentation/Navigator/Destinations":{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","kind":"article","type":"topic","url":"\/documentation\/navigator\/destinations","title":"Destinations","role":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}]}}}