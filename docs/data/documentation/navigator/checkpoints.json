{"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"article","metadata":{"modules":[{"name":"Navigator"}],"roleHeading":"Article","title":"Checkpoints","role":"article"},"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"seeAlsoSections":[{"title":"The Basics","anchor":"The-Basics","generated":true,"identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Destinations"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigator\/checkpoints"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and fragile. One could pass bindings down the tree, but that can be equally problematic at worst, and cumbersome at best.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return.","type":"text"}]},{"type":"heading","anchor":"Examples","level":2,"text":"Examples"},{"text":"Defining a Checkpoint","anchor":"Defining-a-Checkpoint","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension NavigationCheckpoint {","    public static let home: NavigationCheckpoint = \"myApp.home\"","}"]},{"level":3,"text":"Establishing a Checkpoint","type":"heading","anchor":"Establishing-a-Checkpoint"},{"type":"paragraph","inlineContent":[{"text":"Now lets attach that checkpoint to our home view.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"text":"Returning to a Checkpoint","anchor":"Returning-to-a-Checkpoint","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(.home)","}",".disabled(!navigator.canReturnToCheckpoint(.home))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired."}]},{"text":"Advanced Checkpoints","type":"heading","anchor":"Advanced-Checkpoints","level":2},{"anchor":"Returning-values-to-a-Checkpoint","text":"Returning values to a Checkpoint","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Checkpoints can also be used to return values to a caller.","type":"text"}]},{"inlineContent":[{"text":"First we establish our checkpoint, but also adding a handler that receives a specific value type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(.settings) { (result: Int?) in","    returnValue = result","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"code":"returnToCheckpoint","type":"codeVoice"},{"type":"text","text":" as usual, but in this case passing our return value as well."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(.settings, value: 5)","}"]},{"type":"paragraph","inlineContent":[{"text":"This comes in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage.","type":"text"}]},{"name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}],"type":"paragraph"}]}],"references":{"doc://Navigator/documentation/Navigator":{"abstract":[{"type":"text","text":"Managed NavigationStacks for SwiftUI."}],"type":"topic","kind":"symbol","url":"\/documentation\/navigator","identifier":"doc:\/\/Navigator\/documentation\/Navigator","title":"Navigator","role":"collection"},"doc://Navigator/documentation/Navigator/Destinations":{"kind":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"url":"\/documentation\/navigator\/destinations","type":"topic","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","title":"Destinations","role":"article"}}}