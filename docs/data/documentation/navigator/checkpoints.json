{"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"],"type":"codeListing"},{"inlineContent":[{"text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return."}]},{"text":"Examples","level":2,"anchor":"Examples","type":"heading"},{"level":3,"anchor":"Defining-a-Checkpoint","type":"heading","text":"Defining a Checkpoint"},{"inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}],"type":"paragraph"},{"code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var home: NavigationCheckpoint<Void> { checkpoint() }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Just conform your definitions to ","type":"text"},{"type":"codeVoice","code":"NavigationCheckpoints"},{"text":" and specify the return type of the checkpoint (or void if none).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"{ checkpoint() }"},{"type":"text","text":" ensures a checkpoint definition and name that’s unique. Here, that’s "},{"type":"codeVoice","code":"KnownCheckpoints.home.()"},{"type":"text","text":"."}]},{"type":"heading","text":"Establishing a Checkpoint","level":3,"anchor":"Establishing-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(KnownCheckpoints..home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"anchor":"Returning-to-a-Checkpoint","text":"Returning to a Checkpoint"},{"inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(KnownCheckpoints.home)","}",".disabled(!navigator.canReturnToCheckpoint(KnownCheckpoints.home))"]},{"type":"paragraph","inlineContent":[{"text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired.","type":"text"}]},{"type":"heading","text":"Advanced Checkpoints","anchor":"Advanced-Checkpoints","level":2},{"level":3,"anchor":"Returning-values-to-a-Checkpoint","type":"heading","text":"Returning values to a Checkpoint"},{"inlineContent":[{"type":"text","text":"Checkpoints can also be used to return values to a caller."}],"type":"paragraph"},{"inlineContent":[{"text":"As before we define our checkpoint, specifying the return value type.","type":"text"}],"type":"paragraph"},{"code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var settings: NavigationCheckpoint<Int> { checkpoint() }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We then establish our checkpoint, but this time we add a handler that receives our value type."}]},{"type":"codeListing","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(KnownCheckpoints.settings) { result in","    returnValue = result","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"code":"returnToCheckpoint","type":"codeVoice"},{"type":"text","text":" as usual, but in this case passing our return value as well."}]},{"code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(KnownCheckpoints.settings, value: 5)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The value type returned must match the checkpoint definition, otherwise you’ll get a compiler error.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkpoint return values come in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called.","type":"text"}]}],"style":"important","name":"Important"},{"inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"seeAlsoSections":[{"anchor":"The-Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","doc:\/\/Navigator\/documentation\/Navigator\/Destinations"],"title":"The Basics","generated":true}],"variants":[{"paths":["\/documentation\/navigator\/checkpoints"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"article","modules":[{"name":"Navigator"}],"roleHeading":"Article","title":"Checkpoints"},"references":{"doc://Navigator/documentation/Navigator/Destinations":{"type":"topic","url":"\/documentation\/navigator\/destinations","kind":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"title":"Destinations","role":"article"},"doc://Navigator/documentation/Navigator":{"url":"\/documentation\/navigator","type":"topic","kind":"symbol","identifier":"doc:\/\/Navigator\/documentation\/Navigator","title":"Navigator","abstract":[{"type":"text","text":"Managed NavigationStacks for SwiftUI."}],"role":"collection"},"doc://Navigator/documentation/Navigator/NavigationTree":{"kind":"article","url":"\/documentation\/navigator\/navigationtree","type":"topic","role":"article","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","title":"Navigation Tree","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}]}}}