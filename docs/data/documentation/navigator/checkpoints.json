{"seeAlsoSections":[{"anchor":"The-Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/Destinations"],"title":"The Basics","generated":true}],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigator\/checkpoints"]}],"metadata":{"roleHeading":"Article","title":"Checkpoints","modules":[{"name":"Navigator"}],"role":"article"},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"inlineContent":[{"text":"While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and fragile. One could pass bindings down the tree, but that can be equally problematic at worst, and cumbersome at best.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return."}],"type":"paragraph"},{"type":"heading","text":"Examples","level":2,"anchor":"Examples"},{"anchor":"Defining-a-Checkpoint","text":"Defining a Checkpoint","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}]},{"syntax":"swift","code":["extension NavigationCheckpoint {","    public static let home: NavigationCheckpoint = \"myApp.home\"","}"],"type":"codeListing"},{"level":3,"anchor":"Establishing-a-Checkpoint","text":"Establishing a Checkpoint","type":"heading"},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"text":"Returning to a Checkpoint","level":3,"type":"heading","anchor":"Returning-to-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}],"type":"paragraph"},{"syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(.home)","}",".disabled(!navigator.canReturnToCheckpoint(.home))"],"type":"codeListing"},{"inlineContent":[{"text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Advanced Checkpoints","anchor":"Advanced-Checkpoints","type":"heading"},{"anchor":"Returning-values-to-a-Checkpoint","type":"heading","text":"Returning values to a Checkpoint","level":3},{"type":"paragraph","inlineContent":[{"text":"Checkpoints can also be used to return values to a caller.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"First we establish our checkpoint, but also adding a handler that receives a specific value type.","type":"text"}]},{"code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(.settings) { (result: Int?) in","    returnValue = result","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"And then later on when we’re ready to return we call ","type":"text"},{"type":"codeVoice","code":"returnToCheckpoint"},{"type":"text","text":" as usual, but in this case passing our return value as well."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(.settings, value: 5)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This comes in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}]},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called.","type":"text"}]}],"style":"important","type":"aside"},{"inlineContent":[{"text":"Checkpoints are a powerful tool. Use them.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"references":{"doc://Navigator/documentation/Navigator":{"url":"\/documentation\/navigator","kind":"symbol","title":"Navigator","abstract":[{"type":"text","text":"Managed NavigationStacks for SwiftUI."}],"role":"collection","identifier":"doc:\/\/Navigator\/documentation\/Navigator","type":"topic"},"doc://Navigator/documentation/Navigator/Destinations":{"type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}],"url":"\/documentation\/navigator\/destinations","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","title":"Destinations"}}}