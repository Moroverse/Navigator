{"seeAlsoSections":[{"anchor":"The-Basics","generated":true,"title":"The Basics","identifiers":["doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","doc:\/\/Navigator\/documentation\/Navigator\/Destinations","doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"]}],"variants":[{"paths":["\/documentation\/navigator\/dismissible"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Navigator\/documentation\/Navigator"]]},"abstract":[{"type":"text","text":"Understanding dismissible views and their role in application navigation and deep linking."}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"Dismissible Views","role":"article","modules":[{"name":"Navigator"}],"roleHeading":"Article"},"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"How does a presented view dismiss itself? How does a parent view dismiss its children when needed?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if we don’t have access to the state that triggered the original presentation?"}]},{"type":"paragraph","inlineContent":[{"text":"And what about deep-linking? Linking to a known location an application is easy when an application is launched, but what if the application’s been running for a while? What if the user’s presented a sheet or fullscreen cover view and is in the middle of doing something else?","type":"text"}]},{"inlineContent":[{"type":"text","text":"How do you return to a known state in the application?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And what if I want to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prevent"}]},{"type":"text","text":" such things from happening if, say, I’m in the middle of a banking transaction?"}],"type":"paragraph"},{"inlineContent":[{"text":"All of these problems are solved in Navigator by using managed ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"dismissible"}]},{"type":"text","text":" views."}],"type":"paragraph"},{"anchor":"Dismissible-Views","text":"Dismissible Views","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"So what’s a dismissible view?"}],"type":"paragraph"},{"inlineContent":[{"text":"Well, the easy answer would be that a dismissible view is a presented view that can be dismissed… and that’s true. But a better definition for our","type":"text"},{"type":"text","text":" "},{"text":"purposes is that a dismissible view is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"presented"}]},{"text":" view that Navigator ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"knows how to dismiss"}]},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"The-Navigation-Tree","level":3,"text":"The Navigation Tree","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","isActive":true},{"text":", Navigator builds a navigation tree of Navigators within your application, starting from the application root, into each ","type":"text"},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","type":"reference","isActive":true},{"text":", and from there into every presented view wrapped in a ","type":"text"},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedPresentationView","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Think of a TabView where each tab has it’s own "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack"},{"text":". Each managed stack and associated Navigator is a child of the application root.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And if a tab presents a view via a sheet or cover, that view is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"also"}]},{"type":"text","text":" a node in the navigation tree."}]},{"inlineContent":[{"type":"text","text":"The result is a tree of navigation stacks (and paths), presented views that can have their own stacks and paths and presented views, and so on, and so on, as needed."}],"type":"paragraph"},{"inlineContent":[{"text":"This tree can be walked by Navigator and the application at will, allowing the dismissal of presented views from child or root, without the need for passed bindings or closures.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Checkpoints","anchor":"Checkpoints","level":3},{"inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and if you’re in a child view a better solution is returning to previously established "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But that doesn’t help if you’re deep linking of if you’re engaged in cross-module navigation, so let’s be about it."}]},{"type":"heading","text":"Operations","level":2,"anchor":"Operations"},{"inlineContent":[{"type":"text","text":"So here are some of Navigator’s “dismiss” operations, along with examples and use cases."}],"type":"paragraph"},{"level":3,"text":"• Dismiss","type":"heading","anchor":"-Dismiss"},{"type":"paragraph","inlineContent":[{"text":"Dismisses the currently presented ManagedNavigationStack.","type":"text"}]},{"syntax":"swift","code":["Button(\"Dismiss\") {","    navigator.dismiss()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that unlike Apple’s dismiss environment variable, Navigator’s dismiss function doesn’t “pop” the current view on the navigation path."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It exists "},{"type":"emphasis","inlineContent":[{"type":"text","text":"solely"}]},{"text":" to dismiss the currently presented view from ","type":"text"},{"inlineContent":[{"text":"within","type":"text"}],"type":"emphasis"},{"type":"text","text":" the"},{"type":"text","text":" "},{"type":"text","text":"currently presented view."}]},{"level":3,"anchor":"-DismissPresentedViews","type":"heading","text":"• DismissPresentedViews"},{"inlineContent":[{"type":"text","text":"Dismisses any presented sheet or fullScreenCover views presented by this Navigator using "},{"code":"navigator.navigate(to:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Button(\"Dismiss Presented Views\") {","    navigator.dismissPresentedViews()","}"]},{"type":"paragraph","inlineContent":[{"text":"This is used in the parent view to dismiss its children, effectively the opposite of ","type":"text"},{"code":"dismiss()","type":"codeVoice"},{"text":".","type":"text"}]},{"level":3,"anchor":"-DismissAnyChildren","text":"• DismissAnyChildren","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Dismisses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"ManagedNavigationStack"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":" presented by this Navigator or by any child of this Navigator in the current"},{"text":" ","type":"text"},{"text":"navigation tree.","type":"text"}]},{"code":["Button(\"Dismiss Any Children\") {","    navigator.dismissAnyChildren()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Returns true if a dismissal occurred, false otherwise.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is used in the parent view to dismiss its children, effectively the opposite of "},{"code":"dismiss()","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"• DismissAny","type":"heading","level":3,"anchor":"-DismissAny"},{"type":"paragraph","inlineContent":[{"text":"Returns to the root Navigator and dismisses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ManagedPresentationView","type":"codeVoice"},{"type":"text","text":" presented anywhere in the navigation tree."}]},{"code":["Button(\"Dismiss Any\") {","    try? navigator.dismissAny()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Returns true if a dismissal occurred, false otherwise.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This functionality is used extensively in deep linking and cross-module navigation in order to clear any presented views prior to taking the user"},{"text":" ","type":"text"},{"type":"text","text":"elsewhere in the application."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"“I don’t care what the user is doing. Shut it down.”"}]},{"inlineContent":[{"type":"text","text":"It dismisses anything. Anywhere."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this call can throw and fail if navigation is locked."}]},{"text":"Locking Navigation","level":2,"anchor":"Locking-Navigation","type":"heading"},{"inlineContent":[{"text":"As mentioned earlier, what if I want to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"prevent","type":"text"}]},{"type":"text","text":" dismissal from happening?"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"What if, for example, I presented a sheet to pay bils and I don’t want a deep link to interrupt my flow?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just add the "},{"type":"codeVoice","code":"navigationLocked"},{"text":" modifier to the presented view.","type":"text"}]},{"code":["MyTransactionView()","    .navigationLocked()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can still dismiss your view, and a parent can still dismiss its child, but the global "},{"code":"dismissAny","type":"codeVoice"},{"type":"text","text":" action will fail and throw an error."}],"type":"paragraph"},{"inlineContent":[{"text":"When the view containing the navigation lock is dismissed, the global lock is cleared automatically.","type":"text"}],"type":"paragraph"},{"text":"Modifiers","type":"heading","level":2,"anchor":"Modifiers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismissal can also be purely state driven using the following modifiers."}]},{"syntax":"swift","code":["\/\/ dismiss",".navigationDismiss(trigger: $dismiss1)","","\/\/ dismiss presented views",".NavigationDismissPresentedViews(trigger: $dismiss2)","","\/\/ dismiss any children",".navigationDismissAnyChildren(trigger: $dismiss3)","","\/\/ dismiss any",".navigationDismissAny(trigger: $dismiss4)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Binding must be a boolean value and toggled to true to trigger the dismissal. Bound value will be reset to false afterwards."}],"type":"paragraph"},{"anchor":"Checkpoints","type":"heading","text":"Checkpoints","level":2},{"inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and fragile. It depends on knowledge of how the app is constructed and how the views are presented."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"So, again, if you’re in a child view a better solution is returning to a previously established checkpoint ("},{"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","type":"reference","isActive":true},{"text":").","type":"text"}],"type":"paragraph"},{"level":3,"text":"Internals","anchor":"Internals","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That said, you should be aware that checkpoint behavior is based in part on dismissible views!"}]},{"syntax":"swift","code":["internal func returnToCheckpoint<T>(_ checkpoint: NavigationCheckpoint<T>) {","    guard let (navigator, found) = find(checkpoint) else {","        return","    }","    ...","    _ = navigator.dismissAnyChildren()","    _ = navigator.pop(to: found.index)","    ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is just one example of how Navigator’s core functionality is used to enable more complex behaviors."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Navigator\/documentation\/Navigator\/Dismissible","interfaceLanguage":"swift"},"references":{"doc://Navigator/documentation/Navigator/ManagedPresentationView":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedPresentationView"}],"type":"topic","url":"\/documentation\/navigator\/managedpresentationview","abstract":[{"type":"text","text":"Allows presented views not in a navigation stack to be dismissed using a Navigator."}],"role":"symbol","kind":"symbol","title":"ManagedPresentationView","navigatorTitle":[{"text":"ManagedPresentationView","kind":"identifier"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedPresentationView"},"doc://Navigator/documentation/Navigator/ManagedNavigationStack":{"kind":"symbol","abstract":[{"text":"Creates a NavigationStack and its associated Navigator that “manages” the stack.","type":"text"}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/ManagedNavigationStack","title":"ManagedNavigationStack","url":"\/documentation\/navigator\/managednavigationstack","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedNavigationStack"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedNavigationStack"}],"type":"topic"},"doc://Navigator/documentation/Navigator/Checkpoints":{"title":"Checkpoints","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Checkpoints","url":"\/documentation\/navigator\/checkpoints"},"doc://Navigator/documentation/Navigator/Destinations":{"role":"article","type":"topic","kind":"article","title":"Destinations","url":"\/documentation\/navigator\/destinations","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/Destinations","abstract":[{"type":"text","text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol."}]},"doc://Navigator/documentation/Navigator":{"url":"\/documentation\/navigator","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"Navigator","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/Navigator\/documentation\/Navigator"},"doc://Navigator/documentation/Navigator/NavigationTree":{"title":"Understanding The Navigation Tree","url":"\/documentation\/navigator\/navigationtree","identifier":"doc:\/\/Navigator\/documentation\/Navigator\/NavigationTree","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"role":"article","type":"topic","kind":"article"}}}