{"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"How does a presented view dismiss itself? How does a parent view dismiss its children when needed?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"What if we don’t have access to the state that triggered the original presentation?","type":"text"}]},{"inlineContent":[{"type":"text","text":"And what about deep-linking? Linking to a known location an application is easy when an application is launched, but what if the application’s been running for a while? What if the user’s presented a sheet or fullscreen cover view and is in the middle of doing something else?"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"How do you return to a known state in the application?"}]},{"type":"paragraph","inlineContent":[{"text":"And what if I want to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"prevent","type":"text"}]},{"text":" such things from happening if, say, I’m in the middle of a banking transaction?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these problems are solved in Navigator by using managed "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dismissible"}]},{"text":" views.","type":"text"}]},{"anchor":"Dismissible-Views","text":"Dismissible Views","type":"heading","level":2},{"inlineContent":[{"text":"So what’s a dismissible view?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Well, the easy answer would be that a dismissible view is a presented view that can be dismissed… and that’s true. But a better definition for our","type":"text"},{"type":"text","text":" "},{"type":"text","text":"purposes is that a dismissible view is a "},{"inlineContent":[{"type":"text","text":"presented"}],"type":"emphasis"},{"type":"text","text":" view that Navigator "},{"inlineContent":[{"type":"text","text":"knows how to dismiss"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"The-Navigation-Tree","type":"heading","level":3,"text":"The Navigation Tree"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree"},{"text":", Navigator builds a navigation tree of Navigators within your application, starting from the application root, into each ","type":"text"},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true},{"type":"text","text":", and from there into every presented view wrapped in a "},{"isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Think of a TabView where each tab has it’s own ","type":"text"},{"isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","type":"reference"},{"type":"text","text":". Each managed stack and associated Navigator is a child of the application root."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if a tab presents a view via a sheet or cover, that view is "},{"inlineContent":[{"text":"also","type":"text"}],"type":"emphasis"},{"type":"text","text":" a node in the navigation tree."}]},{"inlineContent":[{"text":"The result is a tree of navigation stacks (and paths), presented views that can have their own stacks and paths and presented views, and so on, and so on, as needed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This tree can be walked by Navigator and the application at will, allowing the dismissal of presented views from child or root, without the need for passed bindings or closures."}]},{"level":3,"text":"Checkpoints","type":"heading","anchor":"Checkpoints"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and if you’re in a child view a better solution is returning to previously established "},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But that doesn’t help if you’re deep linking of if you’re engaged in cross-module navigation, so let’s be about it.","type":"text"}]},{"anchor":"Operations","level":2,"text":"Operations","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"So here are some of Navigator’s “dismiss” operations, along with examples and use cases.","type":"text"}]},{"type":"heading","text":"• Dismiss","anchor":"-Dismiss","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismisses the currently presented ManagedNavigationStack."}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Dismiss\") {","    navigator.dismiss()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that unlike Apple’s dismiss environment variable, Navigator’s dismiss function doesn’t “pop” the current view on the navigation path."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It exists "},{"inlineContent":[{"text":"solely","type":"text"}],"type":"emphasis"},{"type":"text","text":" to dismiss the currently presented view from "},{"inlineContent":[{"type":"text","text":"within"}],"type":"emphasis"},{"type":"text","text":" the"},{"type":"text","text":" "},{"text":"currently presented view.","type":"text"}]},{"type":"heading","anchor":"-DismissPresentedViews","level":3,"text":"• DismissPresentedViews"},{"inlineContent":[{"text":"Dismisses any presented sheet or fullScreenCover views presented by this Navigator using ","type":"text"},{"type":"codeVoice","code":"navigator.navigate(to:)"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Button(\"Dismiss Presented Views\") {","    navigator.dismissPresentedViews()","}"]},{"inlineContent":[{"text":"This is used in the parent view to dismiss its children, effectively the opposite of ","type":"text"},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"-DismissAnyChildren","text":"• DismissAnyChildren","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Dismisses ","type":"text"},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":" presented by this Navigator or by any child of this Navigator in the current"},{"type":"text","text":" "},{"type":"text","text":"navigation tree."}]},{"syntax":"swift","code":["Button(\"Dismiss Any Children\") {","    navigator.dismissAnyChildren()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns true if a dismissal occurred, false otherwise."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is used in the parent view to dismiss its children, effectively the opposite of "},{"type":"codeVoice","code":"dismiss()"},{"text":".","type":"text"}]},{"text":"• DismissAny","level":3,"anchor":"-DismissAny","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Returns to the root Navigator and dismisses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"text":" presented anywhere in the navigation tree.","type":"text"}]},{"code":["Button(\"Dismiss Any\") {","    try? navigator.dismissAny()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Returns true if a dismissal occurred, false otherwise.","type":"text"}]},{"inlineContent":[{"text":"This functionality is used extensively in deep linking and cross-module navigation in order to clear any presented views prior to taking the user","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elsewhere in the application."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"“I don’t care what the user is doing. Shut it down.”"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"It dismisses anything. Anywhere.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this call can throw and fail if navigation is locked."}]},{"level":2,"type":"heading","text":"Locking Navigation","anchor":"Locking-Navigation"},{"inlineContent":[{"text":"As mentioned earlier, what if I want to ","type":"text"},{"inlineContent":[{"text":"prevent","type":"text"}],"type":"emphasis"},{"text":" dismissal from happening?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"What if, for example, I presented a sheet to pay bils and I don’t want a deep link to interrupt my flow?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just add the "},{"type":"codeVoice","code":"navigationLocked"},{"text":" modifier to the presented view.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["MyTransactionView()","    .navigationLocked()"]},{"type":"paragraph","inlineContent":[{"text":"You can still dismiss your view, and a parent can still dismiss its child, but the global ","type":"text"},{"type":"codeVoice","code":"dismissAny"},{"type":"text","text":" action will fail and throw an error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the view containing the navigation lock is dismissed, the global lock is cleared automatically."}]},{"type":"heading","anchor":"Modifiers","level":2,"text":"Modifiers"},{"type":"paragraph","inlineContent":[{"text":"Dismissal can also be purely state driven using the following modifiers.","type":"text"}]},{"syntax":"swift","code":["\/\/ dismiss",".navigationDismiss(trigger: $dismiss1)","","\/\/ dismiss presented views",".NavigationDismissPresentedViews(trigger: $dismiss2)","","\/\/ dismiss any children",".navigationDismissAnyChildren(trigger: $dismiss3)","","\/\/ dismiss any",".navigationDismissAny(trigger: $dismiss4)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding must be a boolean value and toggled to true to trigger the dismissal. Bound value will be reset to false afterwards."}]},{"anchor":"Checkpoints","level":2,"text":"Checkpoints","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that dismissal is largely imperative and fragile. It depends on knowledge of how the app is constructed and how the views are presented.","type":"text"}]},{"inlineContent":[{"type":"text","text":"So, again, if you’re in a child view a better solution is returning to a previously established checkpoint ("},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true,"type":"reference"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"heading","text":"Internals","level":3,"anchor":"Internals"},{"inlineContent":[{"text":"That said, you should be aware that checkpoint behavior is based in part on dismissible views!","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["internal func returnToCheckpoint<T>(_ checkpoint: NavigationCheckpoint<T>) {","    guard let (navigator, found) = find(checkpoint) else {","        return","    }","    ...","    _ = navigator.dismissAnyChildren()","    _ = navigator.pop(to: found.index)","    ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is just one example of how Navigator’s core functionality is used to enable more complex behaviors.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"variants":[{"paths":["\/documentation\/navigatorui\/dismissible"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","interfaceLanguage":"swift"},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"NavigatorUI"}],"title":"Dismissible Views"},"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"],"generated":true,"anchor":"The-Basics","title":"The Basics"}],"kind":"article","references":{"doc://NavigatorUI/documentation/NavigatorUI":{"role":"collection","type":"topic","abstract":[],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","url":"\/documentation\/navigatorui","kind":"symbol","title":"NavigatorUI"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedPresentationView":{"kind":"symbol","title":"ManagedPresentationView","abstract":[{"text":"Allows presented views not in a navigation stack to be dismissed using a Navigator.","type":"text"}],"url":"\/documentation\/navigatorui\/managedpresentationview","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedPresentationView","kind":"identifier"}],"navigatorTitle":[{"text":"ManagedPresentationView","kind":"identifier"}],"type":"topic"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedNavigationStack":{"kind":"symbol","abstract":[{"type":"text","text":"Creates a NavigationStack and its associated Navigator that “manages” the stack."}],"role":"symbol","type":"topic","url":"\/documentation\/navigatorui\/managednavigationstack","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ManagedNavigationStack","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedNavigationStack"}],"title":"ManagedNavigationStack","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack"},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"url":"\/documentation\/navigatorui\/checkpoints","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"kind":"article","title":"Checkpoints","role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","type":"topic"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"url":"\/documentation\/navigatorui\/destinations","kind":"article","role":"article","title":"Destinations","type":"topic","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations"},"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"url":"\/documentation\/navigatorui\/navigationtree","kind":"article","role":"article","title":"Understanding The Navigation Tree","type":"topic","abstract":[{"text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live.","type":"text"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree"},"doc://NavigatorUI/documentation/NavigatorUI/Navigator":{"kind":"symbol","abstract":[{"text":"Every ManagedNavigationStack has a Navigator to manage it.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/navigatorui\/navigator","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Navigator"}],"navigatorTitle":[{"kind":"identifier","text":"Navigator"}],"title":"Navigator","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator"}}}