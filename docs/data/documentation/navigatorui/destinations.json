{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigatorui\/destinations"]}],"identifier":{"url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","interfaceLanguage":"swift"},"abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"NavigatorUI"}],"title":"Destinations","role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/AdvancedDestinations"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"],"title":"The Basics","anchor":"The-Basics","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"NavigationDestination types can be used in order to push and present views as needed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This can happen using…"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Standard SwiftUI modifiers like NavigationLink(value:label:).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Imperatively by asking a Navigator to perform the desired action."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Or via a deep link action enabled by a NavigationURLHander.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"They’re one of the core elements that make Navigator possible, and they give us the separation of concerns we mentioned earlier."}]},{"anchor":"Defining-Navigation-Destinations","text":"Defining Navigation Destinations","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Destinations (or routes) are typically just public lists of enumerated values, one for each view desired."}],"type":"paragraph"},{"syntax":"swift","code":["public enum HomeDestinations {","    case page2","    case page3","    case pageN(Int)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"SwiftUI requires navigation destination values to be ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and so do we. That conformance, however, is satisfied by"},{"type":"text","text":" "},{"text":"conforming to the protocol NavigationDestination as shown next.","type":"text"}]},{"type":"heading","level":3,"text":"Defining Destination Views","anchor":"Defining-Destination-Views"},{"type":"paragraph","inlineContent":[{"text":"Defining our destination views is easy, since NavigationDestination actually conforms to the View protocol!","type":"text"}]},{"inlineContent":[{"type":"text","text":"As such, we just extend our destination with a view body that returns the correct view for each case."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension HomeDestinations: NavigationDestination {","    public var body: some View {","        switch self {","        case .page2:","            HomePage2View()","        case .page3:","            HomePage3View()","        case .pageN(let value):","            HomePageNView(number: value)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a powerful technique that lets Navigator easily create our views whenever or wherever needed. That could be via "},{"code":"NavigationLink(value:label)","type":"codeVoice"},{"text":", or presented via a sheet or fullscreen cover.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note how associated values can be used to pass parameters to views as needed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"*To build more complex views that have external dependencies or that require access to environmental values, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/AdvancedDestinations","isActive":true},{"type":"text","text":"."}]},{"type":"heading","anchor":"Registering-Navigation-Destinations","level":3,"text":"Registering Navigation Destinations"},{"type":"paragraph","inlineContent":[{"text":"Like traditional ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" destination types, "},{"code":"NavigationDestination","type":"codeVoice"},{"type":"text","text":" types need to be registered with the enclosing"},{"text":" ","type":"text"},{"type":"text","text":"navigation stack in order for "},{"code":"navigate(to:)","type":"codeVoice"},{"text":" presentations and standard ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"type":"text","text":" transitions"},{"type":"text","text":" "},{"type":"text","text":"to work correctly."}]},{"inlineContent":[{"type":"text","text":"But since each "},{"type":"codeVoice","code":"NavigationDestination"},{"text":" already defines the views to be provided, registering destination types can be done","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using a simple one-line view modifier."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["ManagedNavigationStack {","    HomeView()","        .navigationDestination(HomeDestinations.self)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also makes using the same destination type with more than one navigation stack a lot easier."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note that registering types more than once in the same NavigationStack isn’t recommended and Navigator will in fact warn you if it see multiple registrations of the same type.","type":"text"}],"type":"emphasis"}]},{"anchor":"Using-Navigation-Destinations","text":"Using Navigation Destinations","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that out of the way, Navigation Destinations can be dispatched using a standard SwiftUI "},{"type":"codeVoice","code":"NavigationLink(value:label:)"},{"text":" view.","type":"text"}]},{"code":["NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or they can be dispatched declaratively using modifiers.","type":"text"}]},{"syntax":"swift","code":["\/\/ Sample using optional destination","@State var page: SettingsDestinations?","...","Button(\"Modifier Navigate to Page 3!\") {","    page = .page3","}",".navigate(to: $page)","","\/\/ Sample using trigger value","@State var triggerPage3: Bool = false","...","Button(\"Modifier Trigger Page 3!\") {","    triggerPage3.toggle()","}",".navigate(trigger: $triggerPage3, destination: SettingsDestinations.page3)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or imperatively by asking a Navigator to perform the desired action.","type":"text"}]},{"code":["@Environment(\\.navigator) var navigator: Navigator","...","Button(\"Button Push Home Page 55\") {","    navigator.push(HomeDestinations.pageN(55))","}","Button(\"Button Navigate To Home Page 55\") {","    navigator.navigate(to: HomeDestinations.pageN(55))","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In case you’re wondering, calling "},{"type":"codeVoice","code":"push"},{"type":"text","text":" pushes the associate view onto the current "},{"type":"codeVoice","code":"NavigationStack"},{"text":", while ","type":"text"},{"code":"Navigate(to:)","type":"codeVoice"},{"type":"text","text":" will push"},{"text":" ","type":"text"},{"text":"the view or present the view, based on the ","type":"text"},{"code":"NavigationMethod","type":"codeVoice"},{"text":" specified.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Speaking of which…"}]},{"text":"Navigation Methods","anchor":"Navigation-Methods","level":3,"type":"heading"},{"inlineContent":[{"code":"NavigationDestination","type":"codeVoice"},{"text":" can be extended to provide a distinct ","type":"text"},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationMethod","isActive":true},{"type":"text","text":" for each enumerated type."}],"type":"paragraph"},{"syntax":"swift","code":["extension HomeDestinations: NavigationDestination {","    public var method: NavigationMethod {","        switch self {","        case .page3:","            .sheet","        default:","            .push","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, should "},{"type":"codeVoice","code":"navigator.navigate(to: HomeDestinations.page3)"},{"text":" be called, Navigator will automatically present that view in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sheet. All other views will be pushed onto the navigation stack."}]},{"inlineContent":[{"type":"text","text":"The current navigation methods are: .push (default), .sheet, .cover, and .send."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Predefined methods can be overridden using Navigator’s ","type":"text"},{"code":"navigate(to:method:)","type":"codeVoice"},{"type":"text","text":" function."}]},{"syntax":"swift","code":["Button(\"Present Home Page 55 Via Sheet\") {","    navigator.navigate(to: HomeDestinations.pageN(55), method: .sheet)","}"],"type":"codeListing"},{"inlineContent":[{"text":"Note that NavigationDestinations dispatched via NavigationLink will ","type":"text"},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"type":"text","text":" push onto the NavigationStack. That’s just how SwiftUI works."}],"type":"paragraph"},{"level":2,"anchor":"Values-Not-Destinations","type":"heading","text":"Values, Not Destinations"},{"inlineContent":[{"text":"Navigator is designed to work with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationDestination"},{"type":"text","text":" types and SwiftUI’s "},{"code":"NavigationLink(value:label:)","type":"codeVoice"},{"type":"text","text":"; not "},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Mixing the two on the same ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" can lead to unexpected behavior, and using "},{"type":"codeVoice","code":"NavigationLink(destination:label:)"},{"type":"text","text":" at all can affect programatic navigation using Navigators."}]},{"code":["\/\/ DO","NavigationLink(value: HomeDestinations.page3) {","    Text(\"Link to Home Page 3!\")","}","","\/\/ DON'T DO","NavigationLink(destination: HomePage3View()) {","    Text(\"Link to Home Page 3!\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you start seeing odd behavior returning to previous views, check to make sure a ","type":"text"},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"type":"text","text":" link hasn’t worked its way into your code."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use NavigationDestination values. Avoid using "},{"code":"NavigationLink(destination:label:)","type":"codeVoice"},{"text":".","type":"text"}]}],"style":"important","name":"Important"}]}],"references":{"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","type":"topic","abstract":[{"text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live.","type":"text"}],"kind":"article","title":"Understanding The Navigation Tree","url":"\/documentation\/navigatorui\/navigationtree"},"doc://NavigatorUI/documentation/NavigatorUI/NavigationMethod":{"abstract":[{"type":"text","text":"Defines the desired presentation mechanism for a given "},{"code":"NavigationDestination","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/navigatorui\/navigationmethod","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationMethod","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NavigationMethod"}],"title":"NavigationMethod","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationMethod","kind":"symbol"},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"role":"article","abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","title":"Checkpoints","kind":"article","url":"\/documentation\/navigatorui\/checkpoints"},"doc://NavigatorUI/documentation/NavigatorUI/NavigationDestination":{"role":"symbol","url":"\/documentation\/navigatorui\/navigationdestination","kind":"symbol","type":"topic","title":"NavigationDestination","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"NavigationDestination","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"NavigationDestination"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationDestination","abstract":[{"text":"Provides enumerated navigation types than can be translated into Views.","type":"text"}]},"doc://NavigatorUI/documentation/NavigatorUI":{"kind":"symbol","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","url":"\/documentation\/navigatorui","role":"collection","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"NavigatorUI"},"doc://NavigatorUI/documentation/NavigatorUI/AdvancedDestinations":{"role":"article","abstract":[{"type":"text","text":"Building NavigationDestinations that access the environment and other use cases"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/AdvancedDestinations","type":"topic","title":"Advanced Destinations","url":"\/documentation\/navigatorui\/advanceddestinations","kind":"article"},"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","title":"Dismissible Views","abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/navigatorui\/dismissible"}}}