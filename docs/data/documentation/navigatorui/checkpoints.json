{"identifier":{"url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"metadata":{"modules":[{"name":"NavigatorUI"}],"roleHeading":"Article","role":"article","title":"Checkpoints"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"],"anchor":"The-Basics","title":"The Basics","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on."}]},{"code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree."}]},{"inlineContent":[{"type":"text","text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return."}]},{"type":"heading","level":2,"text":"Examples","anchor":"Examples"},{"type":"heading","text":"Defining a Checkpoint","level":3,"anchor":"Defining-a-Checkpoint"},{"inlineContent":[{"text":"Checkpoints are easy to define and use. Let’s create one called “home”.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var home: NavigationCheckpoint<Void> { checkpoint() }","}"]},{"type":"paragraph","inlineContent":[{"text":"Just conform your definitions to ","type":"text"},{"code":"NavigationCheckpoints","type":"codeVoice"},{"type":"text","text":" and specify the return type of the checkpoint (or void if none)."}]},{"inlineContent":[{"type":"text","text":"Using "},{"code":"{ checkpoint() }","type":"codeVoice"},{"type":"text","text":" ensures a checkpoint definition and name that’s unique. Here, that’s "},{"code":"KnownCheckpoints.home.()","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Establishing a Checkpoint","anchor":"Establishing-a-Checkpoint"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}]},{"syntax":"swift","type":"codeListing","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(KnownCheckpoints.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"]},{"anchor":"Returning-to-a-Checkpoint","level":3,"type":"heading","text":"Returning to a Checkpoint"},{"type":"paragraph","inlineContent":[{"text":"Once defined, they’re easy to use.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(KnownCheckpoints.home)","}",".disabled(!navigator.canReturnToCheckpoint(KnownCheckpoints.home))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired."}]},{"type":"heading","level":2,"text":"Advanced Checkpoints","anchor":"Advanced-Checkpoints"},{"level":3,"text":"Returning values to a Checkpoint","anchor":"Returning-values-to-a-Checkpoint","type":"heading"},{"inlineContent":[{"text":"Checkpoints can also be used to return values to a caller.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As before we define our checkpoint, specifying the return value type."}]},{"code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var settings: NavigationCheckpoint<Int> { checkpoint() }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We then establish our checkpoint, but this time we add a handler that receives our value type.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(KnownCheckpoints.settings) { result in","    returnValue = result","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"type":"codeVoice","code":"returnToCheckpoint"},{"text":" as usual, but in this case passing our return value as well.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(KnownCheckpoints.settings, value: 5)","}"]},{"inlineContent":[{"type":"text","text":"The value type returned must match the checkpoint definition, otherwise you’ll get a compiler error."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Checkpoint return values come in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage.","type":"text"}]},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Checkpoints are a powerful tool. Use them.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigatorui\/checkpoints"]}],"references":{"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"title":"Understanding The Navigation Tree","url":"\/documentation\/navigatorui\/navigationtree","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"kind":"article","type":"topic","role":"article"},"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"kind":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","role":"article","url":"\/documentation\/navigatorui\/dismissible","type":"topic","title":"Dismissible Views","abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}]},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","role":"article","url":"\/documentation\/navigatorui\/destinations","title":"Destinations","kind":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}]},"doc://NavigatorUI/documentation/NavigatorUI":{"url":"\/documentation\/navigatorui","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","role":"collection","kind":"symbol","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"NavigatorUI","type":"topic"}}}