{"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator"]]},"identifier":{"url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigatorui\/navigationtree"]}],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"generated":true,"title":"The Basics","anchor":"The-Basics","identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"]}],"abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NavigationStacks are managed by Navigators. Each "},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true,"type":"reference"},{"text":" used in your code creates its own ","type":"text"},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator","isActive":true,"type":"reference"},{"type":"text","text":" and places an instance of that object into the environment for use by the views contained within it."}]},{"inlineContent":[{"type":"text","text":"That allows "},{"inlineContent":[{"type":"text","text":"those"}],"type":"emphasis"},{"type":"text","text":" views to talk to "},{"inlineContent":[{"type":"text","text":"their"}],"type":"emphasis"},{"type":"text","text":" navigator."}],"type":"paragraph"},{"type":"heading","anchor":"Roots","level":2,"text":"Roots"},{"inlineContent":[{"text":"One exception is the “root” Navigator that’s usually configured and installed in the main application.","type":"text"}],"type":"paragraph"},{"code":["func applicationNavigator() -> Navigator {","    let configuration: NavigationConfiguration = .init(","        restorationKey: nil, \/\/ \"1.0.0\",","        executionDelay: 0.4, \/\/ 0.3 - 5.0","        verbosity: .info","    )","    return Navigator(configuration: configuration)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"That “root” passes the configuration along to its children and also allows for communication in instances like tabs where each tab has its own ManagedNavigationStack.","type":"text"}],"type":"paragraph"},{"anchor":"Growing-The-Tree","level":2,"text":"Growing The Tree","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you look at the code for "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" (and ","type":"text"},{"code":"ManagedPresentationView","type":"codeVoice"},{"text":"), you’ll see where each one gets the current Navigator. That Navigator is then passed to the navigation state as its “parent”, which in turn is used to build a navigation tree.","type":"text"}]},{"syntax":"swift","code":["public struct ManagedPresentationView<Content: View>: View {","    @Environment(\\.navigator) private var parent: Navigator","    @Environment(\\.isPresented) private var isPresented","    ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"Every Navigator created within your application lives within that tree.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"And that tree, in turn, is the key that unlocks much of Navigator’s power and functionality.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"TabViews","type":"heading","text":"TabViews"},{"type":"paragraph","inlineContent":[{"text":"Here’s a rough chart that illustrates the navigation tree of a running application that’s using a TabView.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["Application (Root Navigator)","TabView","-- Tab1: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab2: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab3: ManagedNavigationStack (New Navigator, Root as Parent)","---- Sheet: ManagedNavigationStack (New Navigator, Tab 3's as Parent)","------- Cover: ManagedNavigationStack (New Navigator, Presented Navigator is Parent)"]},{"type":"paragraph","inlineContent":[{"text":"Each tab wants to manage its own navigation, so each one has its own ","type":"text"},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" and its own "},{"type":"codeVoice","code":"Navigator"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"This should make sense. If a view within tab 2 wants to push a new view onto the stack, then it needs to be talking to the right navigator.","type":"text"}]},{"inlineContent":[{"text":"It doesn’t want the view pushed onto tab 3’s stack, does it?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That concept extends to presented sheets and covers as shown in tab 3. Each "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" is installing its own Navigator into the tree, each one linked back to its parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"ManagedPresentationView"},{"text":" creates its own ","type":"text"},{"type":"codeVoice","code":"Navigator"},{"text":" that manages it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And presented views can have their own presented views, with their own stacks, and so on, and so on, as needed."}]},{"text":"Example Code","anchor":"Example-Code","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So with all of the above in mind, consider the following example."}]},{"type":"codeListing","code":["struct ContentView: View {","    @Environment(\\.navigator) var parentNavigator","    var body: some View {","        ManagedNavigationStack { navigator in","            VStack {","                Button(\"Doesn't work as expected\") {","                    parentNavigator.navigate(to: Destinations.second)","                }","                Button(\"Works as expected\") {","                    navigator.navigate(to: Destinations.second)","                }","                SomeView()","            }","            .navigationDestination(Destinations.self)","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Using an environment variable gets the current “parent” Navigator in the tree. (Root in this case.)","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" creates and installs a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"new"}]},{"type":"text","text":" Navigator into the environment, one that knows how to talk to it."}]},{"type":"paragraph","inlineContent":[{"text":"Which means that the code in the first button fails because it’s talking to the wrong Navigator. If you want to manipulate the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"text":" NavigationStack and the designations that ","type":"text"},{"inlineContent":[{"type":"text","text":"it"}],"type":"emphasis"},{"type":"text","text":" knows about, you need to be talking to "},{"inlineContent":[{"text":"its","type":"text"}],"type":"emphasis"},{"text":" Navigator.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"One way to do that is to use the Navigator passed to the ManagedNavigationStack’s closure. That’s shown in the second example.","type":"text"}]},{"code":["ManagedNavigationStack { navigator in","    ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another is to use the environment. Wait. What?"}]},{"anchor":"The-Environment","text":"The Environment","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Let’s consider  ","type":"text"},{"code":"SomeView","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["struct SomeView: View {","    @Environment(\\.navigator) var navigator","    var body: some View {","        Button(\"Also works as expected\") {","            navigator.navigate(to: Destinations.second)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here’s we’re also pulling from the environment, but in this case the code works as expected since "},{"inlineContent":[{"text":"its","type":"text"}],"type":"emphasis"},{"type":"text","text":" environment variable is reading the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" environment variable, which is the one installed by the current "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Walking The Tree","level":2,"anchor":"Walking-The-Tree"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But what if I want to talk to a different Navigator?"}]},{"type":"paragraph","inlineContent":[{"text":"That’s more advanced. One can ","type":"text"},{"type":"codeVoice","code":"find"},{"type":"text","text":" a named Navigator in the tree, but generally you’re going to want to consider other functionality offered by Navigator, like "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true},{"text":", or deep linking using ","type":"text"},{"type":"codeVoice","code":"send"},{"type":"text","text":"."}]},{"type":"heading","text":"Presenting Views","level":2,"anchor":"Presenting-Views"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, as shown earlier, Tab3View presents a sheet using Navigator?"}]},{"inlineContent":[{"type":"text","text":"Internal to Navigator, that sheet’s view is wrapped in a  "},{"isActive":true,"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["func body(content: Content) -> some View {","    content","        .sheet(item: $state.sheet) { destination in","            ManagedPresentationView {","                destination","            }","        }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"That view gets its own Navigator, which knows that it’s been presented and as such is dismissible (See: "},{"isActive":true,"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be advised that if you present your own sheets or views externally from Navigator, you need to do the same so Navigator understands that your sheet or cover exists."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ wrap using ManagedPresentationView","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedPresentationView {","                MyView()","            }","        }","}","\/\/ or use the modifier shortcut which does the same thing","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            MyView()","                .managedPresentationView()","        }","}"]},{"inlineContent":[{"type":"text","text":"You can also just use "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true},{"type":"text","text":" if navigation within the sheet is required."}],"type":"paragraph"},{"type":"codeListing","code":["func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedNavigationStack {","                MyView()","            }","        }","}"],"syntax":"swift"},{"name":"Important","content":[{"inlineContent":[{"text":"Failure to do any of the above can hinder Navigator’s ability to successfully perform in-app navigation or external deep linking.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"important"}],"kind":"content"}],"sections":[],"metadata":{"modules":[{"name":"NavigatorUI"}],"title":"Understanding The Navigation Tree","roleHeading":"Article","role":"article"},"references":{"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"url":"\/documentation\/navigatorui\/destinations","kind":"article","role":"article","title":"Destinations","type":"topic","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations"},"doc://NavigatorUI/documentation/NavigatorUI":{"role":"collection","type":"topic","abstract":[],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","url":"\/documentation\/navigatorui","kind":"symbol","title":"NavigatorUI"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedPresentationView":{"kind":"symbol","title":"ManagedPresentationView","abstract":[{"text":"Allows presented views not in a navigation stack to be dismissed using a Navigator.","type":"text"}],"url":"\/documentation\/navigatorui\/managedpresentationview","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedPresentationView","kind":"identifier"}],"navigatorTitle":[{"text":"ManagedPresentationView","kind":"identifier"}],"type":"topic"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedNavigationStack":{"kind":"symbol","abstract":[{"type":"text","text":"Creates a NavigationStack and its associated Navigator that “manages” the stack."}],"role":"symbol","type":"topic","url":"\/documentation\/navigatorui\/managednavigationstack","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ManagedNavigationStack","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedNavigationStack"}],"title":"ManagedNavigationStack","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack"},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"url":"\/documentation\/navigatorui\/checkpoints","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"kind":"article","title":"Checkpoints","role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","type":"topic"},"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","role":"article","type":"topic","abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"url":"\/documentation\/navigatorui\/dismissible","title":"Dismissible Views","kind":"article"},"doc://NavigatorUI/documentation/NavigatorUI/Navigator":{"kind":"symbol","abstract":[{"text":"Every ManagedNavigationStack has a Navigator to manage it.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/navigatorui\/navigator","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Navigator"}],"navigatorTitle":[{"kind":"identifier","text":"Navigator"}],"title":"Navigator","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator"}}}