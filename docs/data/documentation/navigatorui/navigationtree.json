{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"anchor":"The-Basics","title":"The Basics","identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"NavigationStacks are managed by Navigators. Each "},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true,"type":"reference"},{"text":" used in your code creates its own ","type":"text"},{"isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator","type":"reference"},{"type":"text","text":" and places an instance of that object into the environment for use by the views contained within it."}],"type":"paragraph"},{"inlineContent":[{"text":"That allows ","type":"text"},{"inlineContent":[{"text":"those","type":"text"}],"type":"emphasis"},{"text":" views to talk to ","type":"text"},{"inlineContent":[{"text":"their","type":"text"}],"type":"emphasis"},{"type":"text","text":" navigator."}],"type":"paragraph"},{"text":"Roots","anchor":"Roots","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"One exception is the “root” Navigator that’s usually configured and installed in the main application."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func applicationNavigator() -> Navigator {","    let configuration: NavigationConfiguration = .init(","        restorationKey: nil, \/\/ \"1.0.0\",","        executionDelay: 0.4, \/\/ 0.3 - 5.0","        verbosity: .info","    )","    return Navigator(configuration: configuration)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That “root” passes the configuration along to its children and also allows for communication in instances like tabs where each tab has its own ManagedNavigationStack."}]},{"level":2,"anchor":"Growing-The-Tree","type":"heading","text":"Growing The Tree"},{"type":"paragraph","inlineContent":[{"text":"If you look at the code for ","type":"text"},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":" (and "},{"code":"ManagedPresentationView","type":"codeVoice"},{"text":"), you’ll see where each one gets the current Navigator. That Navigator is then passed to the navigation state as its “parent”, which in turn is used to build a navigation tree.","type":"text"}]},{"type":"codeListing","code":["public struct ManagedPresentationView<Content: View>: View {","    @Environment(\\.navigator) private var parent: Navigator","    @Environment(\\.isPresented) private var isPresented","    ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Every Navigator created within your application lives within that tree."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that tree, in turn, is the key that unlocks much of Navigator’s power and functionality."}]},{"text":"TabViews","type":"heading","anchor":"TabViews","level":2},{"inlineContent":[{"type":"text","text":"Here’s a rough chart that illustrates the navigation tree of a running application that’s using a TabView."}],"type":"paragraph"},{"code":["Application (Root Navigator)","TabView","-- Tab1: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab2: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab3: ManagedNavigationStack (New Navigator, Root as Parent)","---- Sheet: ManagedNavigationStack (New Navigator, Tab 3's as Parent)","------- Cover: ManagedNavigationStack (New Navigator, Presented Navigator is Parent)"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tab wants to manage its own navigation, so each one has its own "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"text":" and its own ","type":"text"},{"type":"codeVoice","code":"Navigator"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"This should make sense. If a view within tab 2 wants to push a new view onto the stack, then it needs to be talking to the right navigator.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"It doesn’t want the view pushed onto tab 3’s stack, does it?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That concept extends to presented sheets and covers as shown in tab 3. Each "},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" is installing its own Navigator into the tree, each one linked back to its parent.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"text":" creates its own ","type":"text"},{"code":"Navigator","type":"codeVoice"},{"text":" that manages it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And presented views can have their own presented views, with their own stacks, and so on, and so on, as needed."}]},{"anchor":"Example-Code","text":"Example Code","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"So with all of the above in mind, consider the following example.","type":"text"}]},{"type":"codeListing","code":["struct ContentView: View {","    @Environment(\\.navigator) var parentNavigator","    var body: some View {","        ManagedNavigationStack { navigator in","            VStack {","                Button(\"Doesn't work as expected\") {","                    parentNavigator.navigate(to: Destinations.second)","                }","                Button(\"Works as expected\") {","                    navigator.navigate(to: Destinations.second)","                }","                SomeView()","            }","            .navigationDestination(Destinations.self)","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Using an environment variable gets the current “parent” Navigator in the tree. (Root in this case.)","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"But ","type":"text"},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" creates and installs a ","type":"text"},{"inlineContent":[{"type":"text","text":"new"}],"type":"emphasis"},{"type":"text","text":" Navigator into the environment, one that knows how to talk to it."}]},{"inlineContent":[{"type":"text","text":"Which means that the code in the first button fails because it’s talking to the wrong Navigator. If you want to manipulate the "},{"inlineContent":[{"type":"text","text":"current"}],"type":"emphasis"},{"text":" NavigationStack and the designations that ","type":"text"},{"inlineContent":[{"text":"it","type":"text"}],"type":"emphasis"},{"text":" knows about, you need to be talking to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"its","type":"text"}]},{"type":"text","text":" Navigator."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to do that is to use the Navigator passed to the ManagedNavigationStack’s closure. That’s shown in the second example."}]},{"code":["ManagedNavigationStack { navigator in","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another is to use the environment. Wait. What?"}]},{"type":"heading","anchor":"The-Environment","text":"The Environment","level":2},{"inlineContent":[{"text":"Let’s consider  ","type":"text"},{"code":"SomeView","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct SomeView: View {","    @Environment(\\.navigator) var navigator","    var body: some View {","        Button(\"Also works as expected\") {","            navigator.navigate(to: Destinations.second)","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here’s we’re also pulling from the environment, but in this case the code works as expected since "},{"type":"emphasis","inlineContent":[{"text":"its","type":"text"}]},{"type":"text","text":" environment variable is reading the "},{"inlineContent":[{"type":"text","text":"current"}],"type":"emphasis"},{"text":" environment variable, which is the one installed by the current ","type":"text"},{"code":"ManagedNavigationStack","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Walking-The-Tree","text":"Walking The Tree","level":2},{"inlineContent":[{"text":"But what if I want to talk to a different Navigator?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"That’s more advanced. One can "},{"type":"codeVoice","code":"find"},{"text":" a named Navigator in the tree, but generally you’re going to want to consider other functionality offered by Navigator, like ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"},{"text":", or deep linking using ","type":"text"},{"type":"codeVoice","code":"send"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Presenting Views","anchor":"Presenting-Views"},{"inlineContent":[{"text":"What if, as shown earlier, Tab3View presents a sheet using Navigator?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Internal to Navigator, that sheet’s view is wrapped in a  ","type":"text"},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","isActive":true},{"type":"text","text":"."}]},{"code":["func body(content: Content) -> some View {","    content","        .sheet(item: $state.sheet) { destination in","            ManagedPresentationView {","                destination","            }","        }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"That view gets its own Navigator, which knows that it’s been presented and as such is dismissible (See: ","type":"text"},{"isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","type":"reference"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be advised that if you present your own sheets or views externally from Navigator, you need to do the same so Navigator understands that your sheet or cover exists."}]},{"code":["\/\/ wrap using ManagedPresentationView","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedPresentationView {","                MyView()","            }","        }","}","\/\/ or use the modifier shortcut which does the same thing","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            MyView()","                .managedPresentationView()","        }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can also just use ","type":"text"},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true,"type":"reference"},{"type":"text","text":" if navigation within the sheet is required."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedNavigationStack {","                MyView()","            }","        }","}"]},{"style":"important","type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Failure to do any of the above can hinder Navigator’s ability to successfully perform in-app navigation or external deep linking."}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigatorui\/navigationtree"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"abstract":[{"text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live.","type":"text"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"NavigatorUI"}],"title":"Understanding The Navigation Tree"},"references":{"doc://NavigatorUI/documentation/NavigatorUI":{"kind":"symbol","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","url":"\/documentation\/navigatorui","role":"collection","abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"title":"NavigatorUI"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedPresentationView":{"title":"ManagedPresentationView","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","navigatorTitle":[{"kind":"identifier","text":"ManagedPresentationView"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedPresentationView","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Allows presented views not in a navigation stack to be dismissed using a Navigator."}],"url":"\/documentation\/navigatorui\/managedpresentationview","role":"symbol"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"role":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","title":"Destinations","kind":"article","url":"\/documentation\/navigatorui\/destinations"},"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","title":"Dismissible Views","abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/navigatorui\/dismissible"},"doc://NavigatorUI/documentation/NavigatorUI/Navigator":{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator","title":"Navigator","abstract":[{"type":"text","text":"Every ManagedNavigationStack has a Navigator to manage it."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Navigator"}],"url":"\/documentation\/navigatorui\/navigator","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Navigator","kind":"identifier"}],"role":"symbol"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedNavigationStack":{"role":"symbol","url":"\/documentation\/navigatorui\/managednavigationstack","title":"ManagedNavigationStack","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedNavigationStack","kind":"identifier"}],"navigatorTitle":[{"text":"ManagedNavigationStack","kind":"identifier"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","abstract":[{"text":"Creates a NavigationStack and its associated Navigator that “manages” the stack.","type":"text"}]},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"role":"article","abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","title":"Checkpoints","kind":"article","url":"\/documentation\/navigatorui\/checkpoints"}}}